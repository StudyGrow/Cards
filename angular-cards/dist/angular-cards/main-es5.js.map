{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/add-card-form/add-card-form.component.ts","webpack:///src/app/components/add-card-form/add-card-form.component.html","webpack:///src/app/components/add-lecture-form/add-lecture-form.component.ts","webpack:///src/app/components/add-lecture-form/add-lecture-form.component.html","webpack:///src/app/components/card/card.component.ts","webpack:///src/app/components/card/card.component.html","webpack:///src/app/components/cards-overview/cards-overview.component.ts","webpack:///src/app/components/cards-overview/cards-overview.component.html","webpack:///src/app/components/carousel/carousel.component.ts","webpack:///src/app/components/carousel/carousel.component.html","webpack:///src/app/components/change-profile/change-profile.component.ts","webpack:///src/app/components/change-profile/change-profile.component.html","webpack:///src/app/components/footer/footer.component.ts","webpack:///src/app/components/footer/footer.component.html","webpack:///src/app/components/lectures/lectures.component.ts","webpack:///src/app/components/lectures/lectures.component.html","webpack:///src/app/components/login-form/login-form.component.ts","webpack:///src/app/components/login-form/login-form.component.html","webpack:///src/app/components/nav-bar/nav-bar.component.ts","webpack:///src/app/components/nav-bar/nav-bar.component.html","webpack:///src/app/components/notifications/notifications.component.ts","webpack:///src/app/components/notifications/notifications.component.html","webpack:///src/app/components/overview/overview.component.ts","webpack:///src/app/components/overview/overview.component.html","webpack:///src/app/components/search-bar/search-bar.component.ts","webpack:///src/app/components/search-bar/search-bar.component.html","webpack:///src/app/components/signup-form/signup-form.component.ts","webpack:///src/app/components/signup-form/signup-form.component.html","webpack:///src/app/components/update-card-form/update-card-form.component.ts","webpack:///src/app/components/update-card-form/update-card-form.component.html","webpack:///src/app/components/update-card-form/dialog.html","webpack:///src/app/models/Card.ts","webpack:///src/app/models/Notification.ts","webpack:///src/app/models/User.ts","webpack:///src/app/models/Vorlesung.ts","webpack:///src/app/routes/about/about.component.ts","webpack:///src/app/routes/about/about.component.html","webpack:///src/app/routes/account-page/account-page.component.ts","webpack:///src/app/routes/account-page/account-page.component.html","webpack:///src/app/routes/cards-page/cards-page.component.ts","webpack:///src/app/routes/cards-page/cards-page.component.html","webpack:///src/app/routes/home-page/home-page.component.ts","webpack:///src/app/routes/home-page/home-page.component.html","webpack:///src/app/routes/login-page/login-page.component.ts","webpack:///src/app/routes/login-page/login-page.component.html","webpack:///src/app/routes/signup-page/signup-page.component.ts","webpack:///src/app/routes/signup-page/signup-page.component.html","webpack:///src/app/services/cards.service.ts","webpack:///src/app/services/config.ts","webpack:///src/app/services/http.service.ts","webpack:///src/app/services/notifications.service.ts","webpack:///src/app/services/states.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","canActivate","AppRoutingModule","forRoot","imports","AppComponent","router","titleService","setTitle","selector","templateUrl","styleUrls","MyHammerConfig","overrides","pan","direction","Hammer","DIRECTION_All","swipe","DIRECTION_VERTICAL","element","mc","touchAction","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","TouchInput","recognizers","Swipe","DIRECTION_HORIZONTAL","AppModule","provide","useValue","useClass","declarations","providers","bootstrap","AddCardFormComponent","cardsService","stateService","http","getCurrentLecture","subscribe","lecture","f","newCard","value","thema","content","abrv","addCard","res","reset","setTyping","color","length","elem","onSubmit","inField","resetNav","AddLectureFormComponent","statesService","emitVl","newLecture","name","toLowerCase","setLoadingState","addLecture","response","emit","field","max","CardComponent","cs","isCollapsed","getActiveCardIndex","change","hide","static","CardsOverviewComponent","userService","getUserInfo","info","cards","CarouselComponent","httpService","event","carousel","previousSlide","nextSlide","activeSlide","getUserId","userId","title","getCards","setFormMode","getFormMode","mode","formShow","formMode","getNewCardIndex","index","selectSlide","n","toString","rand","count","Math","floor","random","slideEvent","parseInt","relatedTarget","setActiveCardIndex","currCard","author","showRandomCard","enableEdit","toggleAddView","ChangeProfileComponent","user","surname","userInfo","form","updateAccount","updatePassword","password","password2","s1","s2","checkEmail","email","username","test","changeAccount","changePassword","FooterComponent","LecturesComponent","getAllLectures","lectures","newVl","console","log","push","LoginFormComponent","login","navigate","submit","NavBarComponent","notification","loading","setPageTitle","authentication","val","loggedIn","getLoadingState","events","getNotifications","notifs","notifications","url","match","i","removeNotification","notif","type","currentTitle","logout","NotificationsComponent","OverviewComponent","SearchBarComponent","getHideSuggestions","clearSuggestions","suggestions","forEach","card","setHideSuggestions","uInput","regex","RegExp","preventDefault","setNewCardIndex","findMatches","SignupFormComponent","createAccount","error","headers","status","errors","UpdateCardFormComponent","dialog","activeCardIndex","cardCopy","cardIndex","updateCard","resp","dialogRef","open","DialogOverviewExampleDialog","width","cancelEdit","service","close","onNoClick","cancel","Card","Notification","t","m","message","HttpError","c","InfoMessage","SuccessMessage","User","Vorlesung","AboutComponent","AccountPageComponent","cardCount","page","s","changePage","CardsPageComponent","route","stateServie","inTypingField","key","goNext","goPrev","vlAbrv","snapshot","paramMap","get","getTyping","HomePageComponent","LoginPageComponent","SignupPageComponent","CardsService","cards$","newCardIndex$","activeCardIndex$","config","split","asObservable","next","urlBase","observe","body","handleErrors","put","pipe","getValue","setTimeout","post","_id","providedIn","HttpConfig","HttpService","lecture$","httpOptions","lectures$","addErrors","err","addNotification","navigateByUrl","NotificationsService","notifications$","splice","StatesService","formMode$","loading$","hideSgtn$","typing$","lastFormMode","UserService","userId$","auth$","localStorage","getItem","setUser","remember","removeLoginInfo","accountInfo$","date","Date","setItem","JSON","stringify","removeItem","environment","production","catch"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\nimport { HomePageComponent } from \"./routes/home-page/home-page.component\";\r\nimport { CardsPageComponent } from \"./routes/cards-page/cards-page.component\";\r\nimport { LoginPageComponent } from \"./routes/login-page/login-page.component\";\r\nimport { SignupPageComponent } from \"./routes/signup-page/signup-page.component\";\r\nimport { AboutComponent } from \"./routes/about/about.component\";\r\nimport { AccountPageComponent } from \"./routes/account-page/account-page.component\";\r\nimport { UserService as AuthGuard } from \"./services/user.service\";\r\nconst routes: Routes = [\r\n  { path: \"\", component: HomePageComponent },\r\n  { path: \"vorlesung/:abrv\", component: CardsPageComponent },\r\n  { path: \"login\", component: LoginPageComponent },\r\n  { path: \"signup\", component: SignupPageComponent },\r\n  { path: \"about\", component: AboutComponent },\r\n  {\r\n    path: \"account\",\r\n    component: AccountPageComponent,\r\n    canActivate: [AuthGuard],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n","import { Component } from \"@angular/core\";\r\nimport { Title } from \"@angular/platform-browser\";\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: \"app-root\",\r\n  templateUrl: \"./app.component.html\",\r\n  styleUrls: [\"./app.component.css\"],\r\n})\r\nexport class AppComponent {\r\n  public constructor(private router: Router, private titleService: Title) {\r\n    this.titleService.setTitle(\"Home\");\r\n  }\r\n}\r\n","<router-outlet></router-outlet>\r\n","//Modules\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { NgModule, Injectable, LOCALE_ID } from \"@angular/core\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\r\nimport { AppRoutingModule } from \"./app-routing.module\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { MatProgressBarModule } from \"@angular/material/progress-bar\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport {\r\n  CarouselModule,\r\n  WavesModule,\r\n  CollapseModule,\r\n  TooltipModule,\r\n} from \"angular-bootstrap-md\";\r\nimport { KatexModule } from \"ng-katex\";\r\n\r\n//Components\r\nimport { AppComponent } from \"./app.component\";\r\nimport { NavBarComponent } from \"./components/nav-bar/nav-bar.component\";\r\nimport { SearchBarComponent } from \"./components/search-bar/search-bar.component\";\r\nimport { AddCardFormComponent } from \"./components/add-card-form/add-card-form.component\";\r\nimport { CarouselComponent } from \"./components/carousel/carousel.component\";\r\nimport { CardComponent } from \"./components/card/card.component\";\r\nimport { AddLectureFormComponent } from \"./components/add-lecture-form/add-lecture-form.component\";\r\nimport { LecturesComponent } from \"./components/lectures/lectures.component\";\r\nimport { HomePageComponent } from \"./routes/home-page/home-page.component\";\r\nimport { CardsPageComponent } from \"./routes/cards-page/cards-page.component\";\r\n//Services\r\nimport { StatesService } from \"./services/states.service\";\r\nimport { HttpService } from \"./services/http.service\";\r\n\r\n//Material Modules\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { UpdateCardFormComponent } from \"./components/update-card-form/update-card-form.component\";\r\n//Gestures\r\nimport {\r\n  HammerModule,\r\n  HammerGestureConfig,\r\n  HAMMER_GESTURE_CONFIG,\r\n} from \"@angular/platform-browser\";\r\nimport { LoginPageComponent } from \"./routes/login-page/login-page.component\";\r\nimport { LoginFormComponent } from \"./components/login-form/login-form.component\";\r\nimport { SignupPageComponent } from \"./routes/signup-page/signup-page.component\";\r\nimport { SignupFormComponent } from \"./components/signup-form/signup-form.component\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { FooterComponent } from \"./components/footer/footer.component\";\r\nimport { AboutComponent } from \"./routes/about/about.component\";\r\nimport { AccountPageComponent } from \"./routes/account-page/account-page.component\";\r\nimport { OverviewComponent } from \"./components/overview/overview.component\";\r\nimport { ChangeProfileComponent } from \"./components/change-profile/change-profile.component\";\r\nimport { CardsOverviewComponent } from \"./components/cards-overview/cards-overview.component\";\r\nimport { NotificationsComponent } from \"./components/notifications/notifications.component\";\r\n\r\n//Localization\r\nimport { registerLocaleData } from \"@angular/common\";\r\nimport de from \"@angular/common/locales/de\";\r\n\r\n// the second parameter 'fr-FR' is optional\r\nregisterLocaleData(de);\r\n\r\ndeclare var Hammer: any;\r\n//Config to allow swipe gestures on carousel\r\n@Injectable()\r\nexport class MyHammerConfig extends HammerGestureConfig {\r\n  overrides = <any>{\r\n    pan: { direction: Hammer.DIRECTION_All },\r\n    swipe: { direction: Hammer.DIRECTION_VERTICAL },\r\n  };\r\n\r\n  buildHammer(element: HTMLElement) {\r\n    const mc = new Hammer(element, {\r\n      touchAction: \"auto\",\r\n      inputClass: Hammer.SUPPORT_POINTER_EVENTS\r\n        ? Hammer.PointerEventInput\r\n        : Hammer.TouchInput,\r\n      recognizers: [\r\n        [\r\n          Hammer.Swipe,\r\n          {\r\n            direction: Hammer.DIRECTION_HORIZONTAL,\r\n          },\r\n        ],\r\n      ],\r\n    });\r\n    return mc;\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavBarComponent,\r\n    SearchBarComponent,\r\n    AddCardFormComponent,\r\n    CarouselComponent,\r\n    CardComponent,\r\n    AddLectureFormComponent,\r\n    LecturesComponent,\r\n    HomePageComponent,\r\n    CardsPageComponent,\r\n    UpdateCardFormComponent,\r\n    LoginPageComponent,\r\n    LoginFormComponent,\r\n    SignupPageComponent,\r\n    SignupFormComponent,\r\n    FooterComponent,\r\n    AboutComponent,\r\n    AccountPageComponent,\r\n    OverviewComponent,\r\n    ChangeProfileComponent,\r\n    CardsOverviewComponent,\r\n    NotificationsComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    NgbModule,\r\n    FormsModule,\r\n    BrowserAnimationsModule,\r\n    MatProgressBarModule,\r\n    MatDialogModule,\r\n    CarouselModule,\r\n    WavesModule,\r\n    HammerModule,\r\n    CollapseModule,\r\n    TooltipModule,\r\n    StoreModule.forRoot({}, {}),\r\n    KatexModule,\r\n  ],\r\n  providers: [\r\n    StatesService,\r\n    HttpService,\r\n    { provide: LOCALE_ID, useValue: \"de\" },\r\n\r\n    {\r\n      provide: HAMMER_GESTURE_CONFIG,\r\n      useClass: MyHammerConfig,\r\n    },\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { StatesService } from \"../../services/states.service\";\r\nimport { CardsService } from \"../../services/cards.service\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { Card } from \"../../models/Card\";\r\nimport { Vorlesung } from \"src/app/models/Vorlesung\";\r\n\r\n@Component({\r\n  selector: \"app-add-card-form\",\r\n  templateUrl: \"./add-card-form.component.html\",\r\n  styleUrls: [\"./add-card-form.component.css\"],\r\n})\r\nexport class AddCardFormComponent implements OnInit {\r\n  lecture: Vorlesung;\r\n  newCard: Card;\r\n  hidden: boolean;\r\n  Contentlength: number;\r\n  themaLength: number;\r\n  constructor(\r\n    private cardsService: CardsService,\r\n    private stateService: StatesService,\r\n    private http: HttpService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.http\r\n      .getCurrentLecture()\r\n      .subscribe((lecture) => (this.lecture = lecture));\r\n  }\r\n  setStyle() {}\r\n  onSubmit(f: NgForm) {\r\n    this.newCard = new Card(f.value.thema, f.value.content, this.lecture.abrv);\r\n    this.cardsService.addCard(this.newCard).subscribe((res) => {\r\n      f.reset();\r\n    });\r\n  }\r\n  inField() {\r\n    this.stateService.setTyping(true);\r\n  }\r\n  resetNav() {\r\n    this.stateService.setTyping(false);\r\n  }\r\n  //Function to set style of small character indicator\r\n  setThemaCharIndicatorStyle(thema) {\r\n    if (thema.value) {\r\n      return {\r\n        color:\r\n          (thema.value && thema.value.length > 0 && thema.value.length < 3) ||\r\n          thema.value.length > 60\r\n            ? \"#ff0000\"\r\n            : \"#000000\",\r\n      };\r\n    } else {\r\n      return { color: \"#000000\" };\r\n    }\r\n  }\r\n  //Function to set style of small character indicator\r\n  setContentCharIndicatorStyle(content) {\r\n    if (content.value) {\r\n      return {\r\n        color:\r\n          content.value && content.value.length > 400 ? \"#ff0000\" : \"#000000\",\r\n      };\r\n    } else {\r\n      return { color: \"#000000\" };\r\n    }\r\n  }\r\n\r\n  getLength(elem) {\r\n    if (elem.value) {\r\n      return elem.value.length;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  isDisabled(content, thema) {\r\n    if (!content.value || !thema.value) {\r\n      return true;\r\n    }\r\n    return (\r\n      content.value.length > 400 ||\r\n      (thema.value.length > 0 && thema.value.length < 3) ||\r\n      thema.value.length > 60\r\n    );\r\n  }\r\n}\r\n","<div id=\"addCard\">\r\n  <form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\" novalidate>\r\n    <h4>Karteikarte hinzufügen</h4>\r\n    <div class=\"form-group\">\r\n      <label for=\"thema\">Frage</label>\r\n      <input\r\n        class=\"form-control\"\r\n        id=\"thema\"\r\n        name=\"thema\"\r\n        type=\"text\"\r\n        placeholder=\"Thema\"\r\n        minlength=\"3\"\r\n        required\r\n        #thema=\"ngModel\"\r\n        ngModel\r\n        (focus)=\"inField()\"\r\n        (blur)=\"resetNav()\"\r\n      />\r\n      <small\r\n        class=\"form-text float-right\"\r\n        [ngStyle]=\"setThemaCharIndicatorStyle(thema)\"\r\n        >{{ getLength(thema) }}/60\r\n      </small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"content\">Antwort</label>\r\n      <textarea\r\n        class=\"form-control\"\r\n        id=\"content\"\r\n        name=\"content\"\r\n        rows=\"5\"\r\n        required\r\n        #content=\"ngModel\"\r\n        ngModel\r\n        (focus)=\"inField()\"\r\n        (blur)=\"resetNav()\"\r\n      ></textarea>\r\n      <small\r\n        class=\"form-text float-right\"\r\n        [ngStyle]=\"setContentCharIndicatorStyle(content)\"\r\n        >{{ getLength(content) }}/400\r\n      </small>\r\n    </div>\r\n\r\n    <input\r\n      class=\"btn btn-primary mb-2\"\r\n      id=\"addBtn\"\r\n      type=\"submit\"\r\n      value=\"Hinzufügen\"\r\n      [disabled]=\"isDisabled(content, thema)\"\r\n    />\r\n  </form>\r\n</div>\r\n","import { Component, OnInit, Output, EventEmitter } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Vorlesung } from \"../../models/Vorlesung\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { StatesService } from \"../../services/states.service\";\r\n@Component({\r\n  selector: \"app-add-lecture-form\",\r\n  templateUrl: \"./add-lecture-form.component.html\",\r\n  styleUrls: [\"./add-lecture-form.component.css\"],\r\n})\r\nexport class AddLectureFormComponent implements OnInit {\r\n  constructor(\r\n    private http: HttpService,\r\n    private statesService: StatesService\r\n  ) {}\r\n  @Output() emitVl: EventEmitter<Vorlesung> = new EventEmitter();\r\n  ngOnInit(): void {}\r\n  onSubmit(f: NgForm) {\r\n    let newLecture = new Vorlesung(f.value.name, f.value.abrv.toLowerCase());\r\n    this.statesService.setLoadingState(true);\r\n    this.http.addLecture(newLecture).subscribe((response) => {\r\n      this.statesService.setLoadingState(false);\r\n      this.emitVl.emit(newLecture);\r\n    });\r\n\r\n    f.reset();\r\n  }\r\n\r\n  setCharIndicatorStyle(field, max: number) {\r\n    if (field.value) {\r\n      return {\r\n        color: field.value.length > max ? \"#ff0000\" : \"#000000\",\r\n      };\r\n    } else {\r\n      return { color: \"#000000\" };\r\n    }\r\n  }\r\n  getLength(elem) {\r\n    if (elem.value) {\r\n      return elem.value.length;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n  isDisabled(name, abrv) {\r\n    if (!name.value || !abrv.value) {\r\n      return true;\r\n    } else {\r\n      return (\r\n        abrv.value.length == 0 ||\r\n        abrv.value.length < 3 ||\r\n        abrv.value.length > 7 ||\r\n        name.value.length == 0 ||\r\n        name.value.length > 60\r\n      );\r\n    }\r\n  }\r\n}\r\n","<div id=\"addLecture\">\r\n  <form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\" novalidate>\r\n    <h4>Vorlesung hinzufügen</h4>\r\n    <div class=\"form-group\">\r\n      <label for=\"name\">Vorlesungsname</label>\r\n      <input\r\n        class=\"form-control\"\r\n        id=\"name\"\r\n        name=\"name\"\r\n        type=\"text\"\r\n        placeholder=\"Datenstrukturen und Algorithmen\"\r\n        minlength=\"3\"\r\n        required\r\n        #name=\"ngModel\"\r\n        ngModel\r\n      />\r\n      <small\r\n        class=\"form-text float-right\"\r\n        [ngStyle]=\"setCharIndicatorStyle(name, 60)\"\r\n        >{{ getLength(name) }}/60\r\n      </small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"abrv\">Abkürzung</label>\r\n      <input\r\n        class=\"form-control\"\r\n        id=\"abrv\"\r\n        name=\"abrv\"\r\n        required\r\n        #abrv=\"ngModel\"\r\n        ngModel\r\n        placeholder=\"Dsal\"\r\n      />\r\n      <small\r\n        class=\"form-text float-right\"\r\n        [ngStyle]=\"setCharIndicatorStyle(abrv, 7)\"\r\n        >{{ getLength(abrv) }}/7\r\n      </small>\r\n    </div>\r\n    <input\r\n      class=\"btn btn-primary mb-2\"\r\n      id=\"addBtn\"\r\n      type=\"submit\"\r\n      value=\"Hinzufügen\"\r\n      [disabled]=\"isDisabled(name, abrv)\"\r\n    />\r\n  </form>\r\n</div>\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { Card } from \"../../models/Card\";\r\nimport { KatexOptions } from \"ng-katex\";\r\nimport { ViewChild } from \"@angular/core\";\r\nimport { CardsService } from \"../../services/cards.service\";\r\n@Component({\r\n  selector: \"app-card\",\r\n  templateUrl: \"./card.component.html\",\r\n  styleUrls: [\"./card.component.css\"],\r\n})\r\nexport class CardComponent implements OnInit {\r\n  @Input() card: Card;\r\n  @ViewChild(\"test\", { static: true }) content;\r\n  constructor(private cs: CardsService) {}\r\n  public isCollapsed = true;\r\n  ngOnInit(): void {\r\n    this.cs.getActiveCardIndex().subscribe((change) => {\r\n      //hides te card content when carousel slides\r\n      this.content.hide();\r\n    });\r\n  }\r\n}\r\n","<div class=\"card\" id=\"`{{ card._id }}`\">\r\n  <div class=\"card-header\">\r\n    {{ card.thema }}\r\n  </div>\r\n  <div class=\"card-body\">\r\n    <button\r\n      mdbBtn\r\n      color=\"primary\"\r\n      class=\"btn btn-light\"\r\n      type=\"button\"\r\n      (click)=\"test.toggle()\"\r\n      mdbWavesEffect\r\n    >\r\n      Mehr dazu\r\n      <i class=\"fas fa-caret-down\"></i>\r\n    </button>\r\n    <div class=\"\" mdbCollapse #test>\r\n      <pre lang=\"de\">\r\n        <ng-katex-paragraph paragraph={{card.content}}></ng-katex-paragraph>\r\n      </pre>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from \"@angular/core\";\nimport { UserService } from \"src/app/services/user.service\";\nimport { Card } from \"src/app/models/Card\";\n\n@Component({\n  selector: \"app-cards-overview\",\n  templateUrl: \"./cards-overview.component.html\",\n  styleUrls: [\"./cards-overview.component.css\"],\n})\nexport class CardsOverviewComponent implements OnInit {\n  public cards: Card[];\n  constructor(private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.userService.getUserInfo().subscribe((info) => {\n      this.cards = info.cards;\n    });\n  }\n}\n","<div class=\"list-group\">\n  <a *ngFor=\"let card of cards\" class=\"list-group-item list-group-item-action\">\n    <div class=\"d-flex w-100 justify-content-between\">\n      <h5 class=\"mb-1\">{{ card.thema }}</h5>\n      <small>{{ card.date | date: \"longDate\":\"de\" }}</small>\n    </div>\n    <p class=\"mb-1\">\n      {{ card.content }}\n    </p>\n  </a>\n</div>\n","import { Component, OnInit, HostListener, ViewChild } from \"@angular/core\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { StatesService } from \"../../services/states.service\";\r\nimport { CardsService } from \"../../services/cards.service\";\r\nimport { Card } from \"../../models/Card\";\r\nimport { Vorlesung } from \"src/app/models/Vorlesung\";\r\nimport { User } from \"src/app/models/User\";\r\nimport { UserService } from \"../../services/user.service\";\r\n@Component({\r\n  selector: \"app-carousel\",\r\n  templateUrl: \"./carousel.component.html\",\r\n  styleUrls: [\"./carousel.component.css\"],\r\n})\r\nexport class CarouselComponent implements OnInit {\r\n  lecture: Vorlesung;\r\n\r\n  @ViewChild(\"mycarousel\", { static: false }) public carousel: any;\r\n  @HostListener(\"swipeleft\", [\"$event\"]) public swipePrev(event: any) {\r\n    this.carousel.previousSlide();\r\n  }\r\n  @HostListener(\"swiperight\", [\"$event\"]) public swipeNext(event: any) {\r\n    this.carousel.nextSlide();\r\n  }\r\n  cards: Card[]; //array of all the cards\r\n  activeSlide: number;\r\n  title: string;\r\n  addComponentHidden: boolean;\r\n  formShow: boolean;\r\n  formMode: string;\r\n  private userId: string;\r\n\r\n  constructor(\r\n    private httpService: HttpService,\r\n    private stateService: StatesService,\r\n    private cardsService: CardsService,\r\n    private userService: UserService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.activeSlide = 0;\r\n    this.userService.getUserId().subscribe((userId) => (this.userId = userId));\r\n    this.httpService.getCurrentLecture().subscribe((lecture) => {\r\n      this.lecture = lecture;\r\n      this.title = this.lecture.name;\r\n    });\r\n\r\n    this.cardsService.getCards().subscribe((cards) => {\r\n      this.cards = cards;\r\n    }); //load the specific cards from the server by subscribing to the observable that the card-service provides\r\n    this.stateService.setFormMode(\"none\");\r\n    this.stateService.getFormMode().subscribe((mode) => {\r\n      this.formShow = mode == \"add\";\r\n      this.formMode = mode;\r\n    });\r\n\r\n    this.cardsService.getNewCardIndex().subscribe((index) => {\r\n      if (this.carousel) {\r\n        this.activeSlide = index;\r\n        this.carousel.selectSlide(index);\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleAddView(): void {\r\n    if (this.formMode != \"edit\") {\r\n      if (this.formMode == \"add\") {\r\n        this.stateService.setFormMode(\"none\");\r\n      } else {\r\n        this.stateService.setFormMode(\"add\");\r\n      }\r\n    }\r\n  }\r\n  enableEdit() {\r\n    this.stateService.setFormMode(\"edit\");\r\n  }\r\n\r\n  setClass() {\r\n    return !this.formShow ? \"btn btn-light\" : \"btn btn-info\";\r\n  }\r\n\r\n  selectSlide(n: number) {\r\n    this.carousel.selectSlide(n.toString());\r\n  }\r\n  showRandomCard() {\r\n    var rand: number = this.activeSlide;\r\n    var count = 0;\r\n    while (count < 5 && rand == this.activeSlide) {\r\n      //calculate a new random index\r\n      count++;\r\n      rand = Math.floor(Math.random() * this.cards.length); //random Cardindex\r\n    }\r\n    this.carousel.selectSlide(rand.toString());\r\n  }\r\n  goToPrev() {\r\n    if (this.formMode != \"edit\") {\r\n      this.carousel.previousSlide();\r\n    }\r\n  }\r\n  goToNext() {\r\n    if (this.formMode != \"edit\") {\r\n      this.carousel.nextSlide();\r\n    }\r\n  }\r\n  onSlide(slideEvent) {\r\n    this.activeSlide = parseInt(slideEvent.relatedTarget);\r\n    this.cardsService.setActiveCardIndex(parseInt(slideEvent.relatedTarget));\r\n  }\r\n  isDisabled() {\r\n    if (this.formMode == \"edit\" || !this.cards || this.cards.length == 0) {\r\n      return true;\r\n    } else {\r\n      let currCard = this.cards[this.activeSlide]; //get the card that is currently showing\r\n\r\n      if (!currCard.author || currCard.author.length == 0) {\r\n        return false;\r\n      }\r\n      if (!this.userId || currCard.author !== this.userId) {\r\n        //there is an author an it is not the user\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n}\r\n","<h3 id=\"vorlesung\">{{ title }}</h3>\r\n<div class=\"btn-group\" id=\"btnDiv\" role=\"group\">\r\n  <button\r\n    class=\"btn btn-light\"\r\n    id=\"rand\"\r\n    placement=\"top\"\r\n    ngbTooltip=\"Zufall\"\r\n    (click)=\"showRandomCard()\"\r\n    [disabled]=\"formMode == 'edit' || !cards || cards.length == 0\"\r\n  >\r\n    <div class=\"fas fa-random\"></div>\r\n  </button>\r\n  <button\r\n    class=\"btn btn-light\"\r\n    id=\"editCard\"\r\n    type=\"button\"\r\n    placement=\"top\"\r\n    [disabled]=\"isDisabled()\"\r\n    (click)=\"enableEdit()\"\r\n    ngbTooltip=\"Bearbeiten\"\r\n  >\r\n    <div class=\"fas fa-pen\"></div>\r\n  </button>\r\n\r\n  <button\r\n    [ngClass]=\"setClass()\"\r\n    id=\"toggleAdd\"\r\n    type=\"button\"\r\n    data-toggle=\"button\"\r\n    (click)=\"toggleAddView()\"\r\n    placement=\"top\"\r\n    [ngbTooltip]=\"formMode == 'add' ? 'Verstecken' : 'Hinzufügen'\"\r\n    [disabled]=\"formMode == 'edit'\"\r\n  >\r\n    <div [class]=\"formMode == 'add' ? 'fas fa-minus' : 'fas fa-plus'\"></div>\r\n  </button>\r\n</div>\r\n<div *ngIf=\"cards && cards.length > 0\" class=\"row\">\r\n  <a *ngIf=\"cards.length > 0\" (click)=\"goToPrev()\">\r\n    <span class=\"fas fa-chevron-left\"></span>\r\n  </a>\r\n  <div id=\"carousel\" (swipeleft)=\"goToPrev()\" (swiperight)=\"goToNext()\">\r\n    <mdb-carousel\r\n      (activeSlideChange)=\"onSlide($event)\"\r\n      #mycarousel\r\n      [(activeSlideIndex)]=\"activeSlide\"\r\n      [animation]=\"'slide'\"\r\n      [isControls]=\"false\"\r\n      [allowSwipe]=\"true\"\r\n      [interval]=\"'0'\"\r\n      ><ng-container *ngFor=\"let card of cards; index as i\">\r\n        <mdb-carousel-item [id]=\"i.toString()\">\r\n          <app-card [card]=\"card\"></app-card>\r\n        </mdb-carousel-item>\r\n      </ng-container>\r\n    </mdb-carousel>\r\n  </div>\r\n  <a *ngIf=\"cards.length > 0\" (click)=\"goToNext()\">\r\n    <span class=\"fas fa-chevron-right\"></span>\r\n  </a>\r\n</div>\r\n","import { Component, OnInit } from \"@angular/core\";\nimport { HttpService } from \"../../services/http.service\";\nimport { NgForm } from \"@angular/forms\";\nimport { User } from \"src/app/models/User\";\nimport { UserInfo } from \"src/app/models/userInfo\";\nimport { UserService } from \"src/app/services/user.service\";\n@Component({\n  selector: \"app-change-profile\",\n  templateUrl: \"./change-profile.component.html\",\n  styleUrls: [\"./change-profile.component.css\"],\n})\nexport class ChangeProfileComponent implements OnInit {\n  public userInfo: UserInfo;\n  public user = new User(\"\", \"\");\n  constructor(private http: HttpService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.user.name = \"\";\n    this.user.surname = \"\";\n    this.userService.getUserInfo().subscribe((info) => {\n      this.userInfo = info;\n      if (info && info.user) {\n        this.user = info.user;\n      }\n    });\n  }\n\n  changeAccount(form: NgForm) {\n    this.userService.updateAccount(form.value);\n  }\n  changePassword(form: NgForm) {\n    this.userService.updatePassword(form.value).subscribe((res) => {\n      form.reset();\n    });\n  }\n  setStyle(password, password2) {\n    if (\n      password2.value &&\n      password2.value.length > 5 &&\n      password2.value != password.value\n    ) {\n      return \"box-shadow:0 0 3px #CC0000;\";\n    }\n    return \"\";\n  }\n  match(s1: string, s2: string) {\n    return s1 && s1.length > 7 && s1 === s2;\n  }\n  validate(form: NgForm) {\n    if (\n      this.checkEmail(form.value.email) &&\n      form.value.username &&\n      form.value.username.length >= 5\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  checkEmail(email) {\n    if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\n      return true;\n    }\n\n    return false;\n  }\n}\n","<h2>Accountdaten ändern</h2>\n<form #form=\"ngForm\" (ngSubmit)=\"changeAccount(form)\" novalidate>\n  <div class=\"form-group\">\n    <label for=\"name\">Vorname</label>\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      name=\"name\"\n      id=\"name\"\n      aria-describedby=\"nameHelp\"\n      #name=\"ngModel\"\n      [(ngModel)]=\"user.name\"\n    />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"surname\">Nachname</label>\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      name=\"surname\"\n      id=\"surname\"\n      aria-describedby=\"surnameHelp\"\n      #surname=\"ngModel\"\n      [(ngModel)]=\"user.surname\"\n    />\n  </div>\n  <div class=\"form-group\">\n    <label for=\"username\">Benutzername</label>\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      id=\"username\"\n      name=\"username\"\n      required\n      maxlength=\"20\"\n      aria-describedby=\"nameHelp\"\n      #username=\"ngModel\"\n      [(ngModel)]=\"user.username\"\n    />\n    <small class=\"form-text\">Wenigstens 5 Zeichen </small>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"email\">Email Adresse</label>\n    <input\n      type=\"email\"\n      class=\"form-control\"\n      name=\"email\"\n      id=\"email\"\n      aria-describedby=\"emailHelp\"\n      required\n      #email=\"ngModel\"\n      [(ngModel)]=\"user.email\"\n    />\n  </div>\n  <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!validate(form)\">\n    Aktualisieren\n  </button>\n</form>\n\n<hr />\n<h2>Passwort ändern</h2>\n<form #pwform=\"ngForm\" (ngSubmit)=\"changePassword(pwform)\" novalidate>\n  <div class=\"form-group\">\n    <label for=\"password\">Neues Passwort</label>\n    <input\n      type=\"password\"\n      class=\"form-control\"\n      name=\"password\"\n      id=\"password\"\n      #password=\"ngModel\"\n      ngModel\n      minlength=\"7\"\n    />\n    <small class=\"form-text\">Wenigstens 7 Zeichen </small>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"password2\">Neues Passwort wiederholen</label>\n    <input\n      type=\"password\"\n      class=\"form-control\"\n      name=\"password2\"\n      id=\"password2\"\n      #password2=\"ngModel\"\n      ngModel\n      minlength=\"7\"\n      [style]=\"setStyle(password, password2)\"\n    />\n  </div>\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary\"\n    [disabled]=\"!match(password.value, password2.value)\"\n  >\n    Ändern\n  </button>\n</form>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<footer class=\"footer\">\n  <ul class=\"list-group list-group-horizontal\">\n    <li class=\"list-group-item\">\n      <a routerLink=\"/about\"> About </a>\n    </li>\n    <li class=\"list-group-item\">\n      <a routerLink=\"/about\" fragment=\"FAQ\"> FAQ </a>\n    </li>\n    <li class=\"list-group-item\">\n      <a href=\"https://git.rwth-aachen.de/jungerjunge2/cards\" target=\"_blank\"\n        >GitLab</a\n      >\n    </li>\n  </ul>\n</footer>\n","import { Component, OnInit, Output, EventEmitter, Input } from \"@angular/core\";\r\nimport { Vorlesung } from \"../../models/Vorlesung\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { Card } from \"../../models/Card\";\r\n@Component({\r\n  selector: \"app-lectures\",\r\n  templateUrl: \"./lectures.component.html\",\r\n  styleUrls: [\"./lectures.component.css\"],\r\n})\r\nexport class LecturesComponent implements OnInit {\r\n  lectures: Vorlesung[];\r\n\r\n  @Input() newVl: Vorlesung;\r\n\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.httpService.getAllLectures().subscribe((lectures) => {\r\n      this.lectures = lectures;\r\n    });\r\n  }\r\n\r\n  ngOnChanges() {\r\n    if (this.newVl) {\r\n      console.log(\"got new vl: \", this.newVl);\r\n      this.lectures.push(this.newVl);\r\n    }\r\n  }\r\n  setLink(lecture: Vorlesung) {\r\n    return \"/vorlesung/\" + lecture.abrv;\r\n  }\r\n}\r\n","<ul class=\"list list-group\">\r\n  <li class=\"list-group-item\" *ngFor=\"let lecture of lectures\">\r\n    <a [routerLink]=\"setLink(lecture)\">{{ lecture.name }}</a>\r\n  </li>\r\n</ul>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { UserService } from \"../../services/user.service\";\r\nimport { Router } from \"@angular/router\";\r\n@Component({\r\n  selector: \"app-login-form\",\r\n  templateUrl: \"./login-form.component.html\",\r\n  styleUrls: [\"./login-form.component.css\"],\r\n})\r\nexport class LoginFormComponent implements OnInit {\r\n  constructor(private user: UserService, private router: Router) {}\r\n  public errors;\r\n\r\n  ngOnInit(): void {}\r\n  submit(form: NgForm) {\r\n    this.user.login(form.value).subscribe(() => {\r\n      this.router.navigate([\"/\"]);\r\n    });\r\n  }\r\n\r\n  isDisabled(username, password) {\r\n    if (!(username.value && password.value)) {\r\n      return true;\r\n    }\r\n    return username.value.length < 5 || password.value.length < 7;\r\n  }\r\n}\r\n","<div class=\"alert alert-warning\" *ngFor=\"let error of errors\">\r\n  {{ error }}\r\n</div>\r\n<div class=\"container\">\r\n  <form #form=\"ngForm\" (ngSubmit)=\"submit(form)\" novalidate>\r\n    <div class=\"form-group\">\r\n      <label for=\"name\">Benutzername</label>\r\n      <input\r\n        type=\"text\"\r\n        class=\"form-control\"\r\n        id=\"name\"\r\n        name=\"username\"\r\n        required\r\n        aria-describedby=\"nameHelp\"\r\n        #username=\"ngModel\"\r\n        ngModel\r\n      />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"password\">Passwort</label>\r\n      <input\r\n        type=\"password\"\r\n        class=\"form-control\"\r\n        name=\"password\"\r\n        id=\"password\"\r\n        #password=\"ngModel\"\r\n        ngModel\r\n      />\r\n    </div>\r\n    <div class=\"form-group form-check\">\r\n      <input\r\n        required\r\n        type=\"checkbox\"\r\n        class=\"form-check-input\"\r\n        id=\"remember\"\r\n        name=\"remember\"\r\n        #remember=\"ngModel\"\r\n        [checked]=\"true\"\r\n        ngModel\r\n      />\r\n      <label class=\"form-check-label\" for=\"remember\">Eingeloggt bleiben</label>\r\n    </div>\r\n    <button\r\n      type=\"submit\"\r\n      class=\"btn btn-primary btn-lg btn-block\"\r\n      [disabled]=\"isDisabled(username, password)\"\r\n    >\r\n      Login\r\n    </button>\r\n  </form>\r\n</div>\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { Card } from \"../../models/Card\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Title } from \"@angular/platform-browser\";\r\nimport { User } from \"src/app/models/User\";\r\nimport { HttpService } from \"src/app/services/http.service\";\r\nimport { CardsService } from \"src/app/services/cards.service\";\r\nimport { NotificationsService } from \"../../services/notifications.service\";\r\nimport { Vorlesung } from \"src/app/models/Vorlesung\";\r\nimport { StatesService } from \"src/app/services/states.service\";\r\nimport { Notification } from \"../../models/Notification\";\r\nimport { UserService } from \"../../services/user.service\";\r\n@Component({\r\n  selector: \"app-nav-bar\",\r\n  templateUrl: \"./nav-bar.component.html\",\r\n  styleUrls: [\"./nav-bar.component.css\"],\r\n})\r\nexport class NavBarComponent implements OnInit {\r\n  public loggedIn: boolean;\r\n  public cards: Card[];\r\n  public notifications: Notification[];\r\n\r\n  public loading: boolean = false;\r\n  public constructor(\r\n    private router: Router,\r\n    private titleService: Title,\r\n\r\n    private cardsService: CardsService,\r\n    private statesService: StatesService,\r\n    private notification: NotificationsService,\r\n    private userService: UserService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.setPageTitle();\r\n    this.userService.authentication().subscribe((val) => (this.loggedIn = val));\r\n    this.statesService.getLoadingState().subscribe((val) => {\r\n      this.loading = val;\r\n    });\r\n    this.router.events.subscribe((e) => {\r\n      //clear messages on route change\r\n      //this.notification.clearNotifications();\r\n    });\r\n    this.notification\r\n      .getNotifications()\r\n      .subscribe((notifs) => (this.notifications = notifs));\r\n    if (this.router.url.match(/vorlesung/)) {\r\n      this.cardsService.getCards().subscribe((cards) => {\r\n        this.cards = cards;\r\n      });\r\n    }\r\n  }\r\n  closeAlert(i: number) {\r\n    this.notification.removeNotification(i);\r\n  }\r\n  isActive(path: string): string {\r\n    return path === this.router.url ? \"active\" : \"\";\r\n  }\r\n  setAlertClass(notif: Notification) {\r\n    return `alert alert-${notif.type} alert-dismissible fade show`;\r\n  }\r\n  setPageTitle(): void {\r\n    let currentTitle: string;\r\n    switch (this.router.url) {\r\n      case \"/login\":\r\n        currentTitle = \"Login\";\r\n        break;\r\n      case \"/signup\":\r\n        currentTitle = \"Sign Up\";\r\n        break;\r\n      case \"/\":\r\n        currentTitle = \"Home\";\r\n        break;\r\n      default:\r\n        currentTitle = \"Cards\";\r\n    }\r\n    this.titleService.setTitle(currentTitle);\r\n  }\r\n  logout() {\r\n    this.userService.logout();\r\n\r\n    this.router.navigate([\"/\"]);\r\n  }\r\n}\r\n","<nav\r\n  class=\"navbar navbar-expand-lg navbar-light bg-light\"\r\n  role=\"alert\"\r\n  style=\"padding-right: 0;\"\r\n>\r\n  <div class=\"row\">\r\n    <div class=\"col-8\">\r\n      <button\r\n        class=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarNav\"\r\n        aria-controls=\"navbarNav\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n        <ul class=\"navbar-nav\" id=\"navlist\">\r\n          <li class=\"{{ isActive('/') }} nav-item\">\r\n            <a class=\"nav-link\" routerLink=\"/\" tabindex=\"1\"\r\n              ><i class=\"fas fa-home\"></i> Vorlesungen</a\r\n            >\r\n          </li>\r\n\r\n          <li *ngIf=\"!loggedIn\" class=\"{{ isActive('/login') }} nav-item\">\r\n            <a class=\"nav-link\" routerLink=\"/login\"\r\n              ><i class=\"fas fa-user\"></i> Login</a\r\n            >\r\n          </li>\r\n          <li *ngIf=\"!loggedIn\" class=\"{{ isActive('/signup') }} nav-item\">\r\n            <a class=\"nav-link\" routerLink=\"/signup\"\r\n              ><i class=\"fas fa-plus\"></i> Registrieren</a\r\n            >\r\n          </li>\r\n          <li *ngIf=\"loggedIn\" class=\"{{ isActive('/profile') }} nav-item\">\r\n            <div class=\"dropdown\">\r\n              <a\r\n                class=\"nav-link\"\r\n                type=\"button\"\r\n                id=\"dropdownMenuButton\"\r\n                data-toggle=\"dropdown\"\r\n                aria-haspopup=\"true\"\r\n                aria-expanded=\"false\"\r\n              >\r\n                <i class=\"fas fa-user-circle\"></i> Account\r\n              </a>\r\n              <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                <a\r\n                  class=\"dropdown-item\"\r\n                  routerLink=\"/account\"\r\n                  placement=\"bottom\"\r\n                  >Account management</a\r\n                >\r\n                <a class=\"dropdown-item\" (click)=\"logout()\">\r\n                  Logout\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"cards\" class=\"col-4\" style=\"padding-right: 0;\">\r\n      <app-search-bar></app-search-bar>\r\n    </div>\r\n  </div>\r\n</nav>\r\n<div id=\"progress\">\r\n  <mat-progress-bar *ngIf=\"loading\" mode=\"indeterminate\"></mat-progress-bar>\r\n</div>\r\n\r\n<div\r\n  #alert\r\n  *ngFor=\"let notif of notifications; index as i\"\r\n  [class]=\"setAlertClass(notif)\"\r\n  role=\"alert\"\r\n>\r\n  <button\r\n    type=\"button\"\r\n    class=\"close\"\r\n    aria-label=\"Close\"\r\n    (click)=\"closeAlert(i)\"\r\n  >\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  {{ notif.message }}\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-notifications',\n  templateUrl: './notifications.component.html',\n  styleUrls: ['./notifications.component.css']\n})\nexport class NotificationsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>\n  Hier werden später Benachrichtigungen über Bearbeitungsvorschläge und\n  Kommentare stehen\n</p>\n","import { Component, OnInit } from \"@angular/core\";\nimport { UserInfo } from \"../../models/userInfo\";\nimport { HttpService } from \"src/app/services/http.service\";\nimport { User } from \"src/app/models/User\";\nimport { UserService } from \"src/app/services/user.service\";\n@Component({\n  selector: \"app-overview\",\n  templateUrl: \"./overview.component.html\",\n  styleUrls: [\"./overview.component.css\"],\n})\nexport class OverviewComponent implements OnInit {\n  public userInfo: UserInfo;\n  public user = new User(\"\", \"\");\n  constructor(private http: HttpService, private userService: UserService) {}\n\n  ngOnInit(): void {\n    this.userService.getUserInfo().subscribe((info) => {\n      this.userInfo = info;\n      if (info && info.user) {\n        this.user = info.user;\n      }\n    });\n  }\n}\n","<div class=\"card\">\n  <div class=\"card-body\">\n    <h2 class=\"card-title\">\n      <img src=\"assets/profile.svg\" alt=\"Profile picture\" /> {{ user.username }}\n    </h2>\n  </div>\n  <ul class=\"list-group list-group-flush\">\n    <li class=\"list-group-item\">\n      <div class=\"row\">\n        <div class=\"col-6\">\n          Email\n        </div>\n        <div class=\"col-6 text-right\">\n          {{ user.email }}\n        </div>\n      </div>\n    </li>\n    <li class=\"list-group-item\">\n      <div class=\"row\">\n        <div class=\"col-6\">\n          Vorname\n        </div>\n        <div class=\"col-6 text-right\">\n          {{ user.name }}\n        </div>\n      </div>\n    </li>\n    <li class=\"list-group-item\">\n      <div class=\"row\">\n        <div class=\"col-6\">\n          Nachname\n        </div>\n        <div class=\"col-6 text-right\">\n          {{ user.surname }}\n        </div>\n      </div>\n    </li>\n  </ul>\n</div>\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { CardsService } from \"../../services/cards.service\";\r\nimport { StatesService } from \"../../services/states.service\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { Card } from \"../../models/Card\";\r\nimport { SearchSuggestion } from \"../../models/SearchSuggestion\";\r\nimport { Vorlesung } from \"src/app/models/Vorlesung\";\r\n\r\n@Component({\r\n  selector: \"app-search-bar\",\r\n  templateUrl: \"./search-bar.component.html\",\r\n  styleUrls: [\"./search-bar.component.css\"],\r\n})\r\nexport class SearchBarComponent implements OnInit {\r\n  constructor(\r\n    private cardsService: CardsService,\r\n    private stateService: StatesService\r\n  ) {}\r\n  cards: Card[];\r\n  suggestions: SearchSuggestion[];\r\n  uInput: string;\r\n  clearSuggestions: boolean;\r\n\r\n  ngOnInit(): void {\r\n    this.stateService.getHideSuggestions().subscribe((value) => {\r\n      this.clearSuggestions = value;\r\n      if (value) {\r\n        this.suggestions = [];\r\n      }\r\n    });\r\n    this.cardsService.getCards().subscribe((cards) => {\r\n      this.cards = cards;\r\n      cards.forEach((card) => {\r\n        if (card.thema == null) {\r\n          card.thema = \"\";\r\n        }\r\n        if (card.content == null) {\r\n          card.content = \"\";\r\n        }\r\n      });\r\n    });\r\n  }\r\n  inField() {\r\n    this.stateService.setTyping(true);\r\n  }\r\n  resetNav() {\r\n    this.stateService.setTyping(false);\r\n  }\r\n  findMatches(e: Event) {\r\n    this.stateService.setHideSuggestions(false); //show suggestions\r\n    if (this.uInput && this.uInput.length > 2) {\r\n      this.suggestions = [];\r\n      const regex = new RegExp(`${this.uInput}`, \"gi\");\r\n\r\n      for (let i = 0; i < this.cards.length; i++) {\r\n        if (this.cards[i].thema.match(regex)) {\r\n          this.suggestions.push({ title: this.cards[i].thema, index: i });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  navigateTo(e: Event, index: number) {\r\n    e.preventDefault();\r\n    this.uInput = \"\";\r\n    this.cardsService.setNewCardIndex(index);\r\n  }\r\n}\r\n","<input\r\n  [(ngModel)]=\"uInput\"\r\n  (input)=\"findMatches($event)\"\r\n  class=\"form-control float-right\"\r\n  id=\"search\"\r\n  type=\"search\"\r\n  placeholder=\"Frage suchen\"\r\n  (focus)=\"inField()\"\r\n  (blur)=\"resetNav()\"\r\n/>\r\n<div *ngIf=\"suggestions\" id=\"matches\">\r\n  <ul class=\"list-group\">\r\n    <li *ngFor=\"let suggestion of suggestions\" class=\"list-group-item\">\r\n      <a href=\"#\" (click)=\"navigateTo($event, suggestion.index)\">{{\r\n        suggestion.title\r\n      }}</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { Router } from \"@angular/router\";\r\nimport { UserService } from \"src/app/services/user.service\";\r\n@Component({\r\n  selector: \"app-signup-form\",\r\n  templateUrl: \"./signup-form.component.html\",\r\n  styleUrls: [\"./signup-form.component.css\"],\r\n})\r\nexport class SignupFormComponent implements OnInit {\r\n  constructor(private userService: UserService, private router: Router) {}\r\n  errors;\r\n\r\n  ngOnInit(): void {}\r\n  submit(form: NgForm) {\r\n    this.userService.createAccount(form.value).subscribe(\r\n      (response) => {\r\n        if (response) {\r\n          this.router.navigate([\"/\"]);\r\n        }\r\n      },\r\n      (error) => {\r\n        if ((error.headers.status = 422)) {\r\n          console.log(error);\r\n          this.errors = error.error.errors;\r\n        }\r\n      }\r\n    );\r\n  }\r\n  setStyle(password, password2) {\r\n    if (\r\n      password2.value &&\r\n      password2.value.length > 5 &&\r\n      password2.value != password.value\r\n    ) {\r\n      return \"box-shadow:0 0 3px #CC0000;\";\r\n    }\r\n    return \"\";\r\n  }\r\n  checkEmail(email) {\r\n    if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  getLength(elem) {\r\n    if (elem.value) {\r\n      return elem.value.length;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n  setCharIndicatorStyle(field, max: number) {\r\n    if (field.value) {\r\n      return {\r\n        color: field.value.length > max ? \"#ff0000\" : \"#000000\",\r\n      };\r\n    } else {\r\n      return { color: \"#000000\" };\r\n    }\r\n  }\r\n  isDisabled(username, email, password, password2) {\r\n    if (!(username.value && email.value && password.value)) {\r\n      return true;\r\n    }\r\n    return (\r\n      username.value.length < 5 ||\r\n      password.value.length < 7 ||\r\n      password.value != password2.value ||\r\n      !this.checkEmail(email.value)\r\n    );\r\n  }\r\n}\r\n","<div class=\"alert alert-warning\" *ngFor=\"let error of errors\">\r\n  {{ error }}\r\n</div>\r\n<div class=\"container\">\r\n  <form #form=\"ngForm\" (ngSubmit)=\"submit(form)\" novalidate>\r\n    <div class=\"form-group\">\r\n      <label for=\"name\">Benutzername</label>\r\n      <input\r\n        type=\"text\"\r\n        class=\"form-control\"\r\n        id=\"username\"\r\n        name=\"username\"\r\n        required\r\n        maxlength=\"20\"\r\n        aria-describedby=\"nameHelp\"\r\n        #username=\"ngModel\"\r\n        ngModel\r\n      />\r\n      <small class=\"form-text\">Wenigstens 5 Zeichen </small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"email\">Email Adresse</label>\r\n      <input\r\n        type=\"email\"\r\n        class=\"form-control\"\r\n        name=\"email\"\r\n        id=\"email\"\r\n        aria-describedby=\"emailHelp\"\r\n        required\r\n        #email=\"ngModel\"\r\n        ngModel\r\n      />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"password\">Passwort</label>\r\n      <input\r\n        type=\"password\"\r\n        class=\"form-control\"\r\n        name=\"password\"\r\n        id=\"password\"\r\n        #password=\"ngModel\"\r\n        ngModel\r\n        minlength=\"7\"\r\n      />\r\n      <small class=\"form-text\">Wenigstens 7 Zeichen </small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"password\">Passwort wiederholen</label>\r\n      <input\r\n        type=\"password\"\r\n        class=\"form-control\"\r\n        name=\"password2\"\r\n        id=\"password2\"\r\n        #password2=\"ngModel\"\r\n        ngModel\r\n        minlength=\"7\"\r\n        [style]=\"setStyle(password, password2)\"\r\n      />\r\n      <small class=\"form-text\"> </small>\r\n    </div>\r\n    <button\r\n      type=\"submit\"\r\n      class=\"btn btn-primary btn-lg btn-block\"\r\n      [disabled]=\"isDisabled(username, email, password, password2)\"\r\n    >\r\n      Account erstellen\r\n    </button>\r\n  </form>\r\n</div>\r\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { StatesService } from \"../../services/states.service\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { CardsService } from \"../../services/cards.service\";\r\nimport { Card } from \"../../models/Card\";\r\nimport { Vorlesung } from \"../../models/Vorlesung\";\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\n\r\n@Component({\r\n  selector: \"app-update-card-form\",\r\n  templateUrl: \"./update-card-form.component.html\",\r\n  styleUrls: [\"./update-card-form.component.css\"],\r\n})\r\nexport class UpdateCardFormComponent implements OnInit {\r\n  public cardCopy: Card;\r\n  private cards: Card[];\r\n  private cardIndex: number; //saves the cardindex which the user is currently updating\r\n  private activeCardIndex: number; //saves the active cardindex\r\n  constructor(\r\n    private cardsService: CardsService,\r\n    private statesService: StatesService,\r\n    public dialog: MatDialog\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.cardsService.getCards().subscribe((cards) => {\r\n      this.cards = cards;\r\n    });\r\n    this.cardsService.getActiveCardIndex().subscribe((index) => {\r\n      this.activeCardIndex = index;\r\n      if (this.cards) {\r\n        this.cardCopy = { ...this.cards[this.activeCardIndex] };\r\n      }\r\n      this.cardIndex = this.activeCardIndex;\r\n    });\r\n  }\r\n  inField() {\r\n    this.statesService.setTyping(true);\r\n  }\r\n  resetNav() {\r\n    this.statesService.setTyping(false);\r\n  }\r\n  onSubmit(f: NgForm) {\r\n    this.cardCopy.content = f.value.content;\r\n    this.cardCopy.thema = f.value.thema;\r\n    this.cardsService\r\n      .updateCard({ ...this.cardCopy }, this.cardIndex)\r\n      .subscribe((resp) => {\r\n        f.reset();\r\n      });\r\n  }\r\n  cancelEdit() {\r\n    const dialogRef = this.dialog.open(DialogOverviewExampleDialog, {\r\n      width: \"400px\",\r\n    });\r\n  }\r\n\r\n  //Function to set style of small character indicator\r\n  setThemaCharIndicatorStyle(thema) {\r\n    if (thema.value) {\r\n      return {\r\n        color:\r\n          (thema.value && thema.value.length > 0 && thema.value.length < 3) ||\r\n          thema.value.length > 60\r\n            ? \"#ff0000\"\r\n            : \"#000000\",\r\n      };\r\n    } else {\r\n      return { color: \"#000000\" };\r\n    }\r\n  }\r\n  //Function to set style of small character indicator\r\n  setContentCharIndicatorStyle(content) {\r\n    if (content.value) {\r\n      return {\r\n        color:\r\n          content.value && content.value.length > 400 ? \"#ff0000\" : \"#000000\",\r\n      };\r\n    } else {\r\n      return { color: \"#000000\" };\r\n    }\r\n  }\r\n\r\n  getLength(elem) {\r\n    if (elem.value) {\r\n      return elem.value.length;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  isDisabled(content, thema) {\r\n    if (!content.value || !thema.value) {\r\n      return true;\r\n    }\r\n    return (\r\n      content.value.length > 400 ||\r\n      (thema.value.length > 0 && thema.value.length < 3) ||\r\n      thema.value.length > 60\r\n    );\r\n  }\r\n}\r\n@Component({\r\n  selector: \"dialog-overview-example-dialog\",\r\n  templateUrl: \"dialog.html\",\r\n})\r\nexport class DialogOverviewExampleDialog {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DialogOverviewExampleDialog>,\r\n    private service: StatesService\r\n  ) {}\r\n\r\n  cancel() {\r\n    this.service.setFormMode(\"reset\");\r\n    this.service.setLoadingState(false);\r\n    this.dialogRef.close();\r\n  }\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","<div id=\"addCard\">\r\n  <form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\" novalidate>\r\n    <h4>Karteikarte bearbeiten</h4>\r\n    <div class=\"form-group\">\r\n      <label for=\"thema\">Frage</label>\r\n      <input\r\n        class=\"form-control\"\r\n        id=\"thema\"\r\n        name=\"thema\"\r\n        type=\"text\"\r\n        placeholder=\"Thema\"\r\n        minlength=\"3\"\r\n        required\r\n        #thema=\"ngModel\"\r\n        [(ngModel)]=\"cardCopy.thema\"\r\n        (focus)=\"inField()\"\r\n        (blur)=\"resetNav()\"\r\n      />\r\n      <small\r\n        class=\"form-text float-right\"\r\n        [ngStyle]=\"setThemaCharIndicatorStyle(thema)\"\r\n        >{{ getLength(thema) }}/60\r\n      </small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"content\">Antwort</label>\r\n      <textarea\r\n        class=\"form-control\"\r\n        id=\"content\"\r\n        name=\"content\"\r\n        rows=\"5\"\r\n        required\r\n        #content=\"ngModel\"\r\n        [(ngModel)]=\"cardCopy.content\"\r\n        (focus)=\"inField()\"\r\n        (blur)=\"resetNav()\"\r\n      ></textarea>\r\n      <small\r\n        class=\"form-text float-right\"\r\n        [ngStyle]=\"setContentCharIndicatorStyle(content)\"\r\n        >{{ getLength(content) }}/400\r\n      </small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <input\r\n        class=\"btn btn-success mb-2 mr-1\"\r\n        type=\"submit\"\r\n        value=\"Sichern\"\r\n        [disabled]=\"isDisabled(content, thema)\"\r\n      />\r\n      <input\r\n        class=\"btn btn-danger mb-2\"\r\n        type=\"button\"\r\n        value=\"Abbruch\"\r\n        (click)=\"cancelEdit()\"\r\n      />\r\n    </div>\r\n  </form>\r\n</div>\r\n","<h1 mat-dialog-title>Abbruch</h1>\r\n<div mat-dialog-content>\r\n  <p>Bist du sicher, dass du das Bearbeiten dieser Karte abbrechen möchtest?</p>\r\n</div>\r\n<hr />\r\n<div mat-dialog-actions style=\"text-align: right;\">\r\n  <button class=\"btn btn-secondary mr-2\" mat-button (click)=\"onNoClick()\">\r\n    Nein,zurück\r\n  </button>\r\n  <button class=\"btn btn-danger\" mat-button (click)=\"cancel()\">Ja</button>\r\n</div>\r\n","export class Card {\r\n  _id?: string;\r\n  thema: string;\r\n  author?: string;\r\n  content: string;\r\n  abrv: string;\r\n  date?: Date;\r\n  constructor(thema, content, abrv) {\r\n    this.thema = thema;\r\n    this.content = content;\r\n    this.abrv = abrv;\r\n  }\r\n}\r\n","export abstract class Notification {\r\n  type: string;\r\n  message: string;\r\n\r\n  constructor(t: string, m: string) {\r\n    this.type = t;\r\n    this.message = m;\r\n  }\r\n}\r\n\r\nexport class HttpError extends Notification {\r\n  code: number;\r\n  constructor(m: string, c?: number) {\r\n    super(\"warning\", m);\r\n    this.code = c;\r\n  }\r\n}\r\n\r\nexport class InfoMessage extends Notification {\r\n  constructor(m: string) {\r\n    super(\"info\", m);\r\n  }\r\n}\r\nexport class SuccessMessage extends Notification {\r\n  constructor(m: string) {\r\n    super(\"success\", m);\r\n  }\r\n}\r\n","export class User {\r\n  username: string;\r\n  email: string;\r\n  _id: string;\r\n  name: string;\r\n  surname: string;\r\n  constructor(name: string, email: string) {\r\n    this.username = name;\r\n    this.email = email;\r\n  }\r\n}\r\n","export class Vorlesung {\r\n  name: string;\r\n  abrv: string;\r\n  constructor(name, abrv) {\r\n    this.name = name;\r\n    this.abrv = abrv;\r\n  }\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\n\nimport { UserService } from \"src/app/services/user.service\";\n\n@Component({\n  selector: \"app-about\",\n  templateUrl: \"./about.component.html\",\n  styleUrls: [\"./about.component.css\"],\n})\nexport class AboutComponent implements OnInit {\n  public loggedIn: boolean;\n  constructor(private user: UserService) {}\n\n  ngOnInit(): void {\n    this.user.authentication().subscribe((val) => {\n      this.loggedIn = val;\n    });\n  }\n}\n","<app-nav-bar></app-nav-bar>\n<div class=\"container\">\n  <div class=\"media\">\n    <img src=\"assets/c.png\" class=\"align-self-center mr-1\" alt=\"Logo\" />\n    <div class=\"media-body\">\n      <h3>Cards</h3>\n    </div>\n  </div>\n  <p>\n    Cards ist eine Webseite, die dir dabei helfen soll dich auf deine Klausuren\n    und Prüfungen vorzubereiten. Das Konzept von Cards beruht auf den\n    klassischen Karteikarten. Anders als die klassischen Karteikarten brauchst\n    du jedoch nicht deinen Stapel an Karten überall mitzuschleppen. Unsere\n    Webseite eignet sich vor allem auch für Smartphones, somit kannst du dir\n    deine Karteikarten auch unterwegs anschauen. Sie richtet sich vor allem an\n    Studenten.\n  </p>\n  <p *ngIf=\"!loggedIn\">\n    <a routerLink=\"/signup\">Erstelle einen Account</a>, um alle Vorteile unserer\n    Webseite zu nutzen.\n  </p>\n  <h4>Sharing is Caring</h4>\n  <p>\n    Karteikarten, die du auf unserer Webseite hinzufügst, sind automatisch für\n    alle anderen Nutzer sichtbar. Andererseits kannst du dir auch Karten von\n    anderen Nutzern anschauen.Dies sorgt dafür, dass du optimal auf deine\n    Klausur vorbereitet bist. <br />\n    Wenn du mit einer Karte nicht zufrieden bist, oder du glaubst ihr Inhalt\n    wäre falsch oder unvollständig, kannst du sie bearbeiten. Karten, welche von\n    registrierten Nutzern erstellt worden sind, kannst du leider nicht\n    bearbeiten. In einer späteren Version wird es möglich sein für diese Karte\n    einen Verberungsvorschlag an den Ertseller der Karte zu senden.\n  </p>\n  <h4>Wir freuen uns über Feedback</h4>\n  <p>\n    Wir bemühen uns, die Seite fehlerfrei zu gestalten. Trotzdem kann es sein,\n    dass sich der ein oder andere Fehler eingeschlichen hat. Diesen kannst du\n    uns gerne melden indem du\n    <a\n      href=\"https://git.rwth-aachen.de/jungerjunge2/cards/-/issues\"\n      target=\"_blank\"\n      >hier</a\n    >\n    ein Issue erstellst. Wir versuchen den Fehler, dann so schnell wie möglich\n    zu beheben. Du kannst uns dort auch gerne Feedback hinterlassen\n  </p>\n\n  <h3 id=\"FAQ\">FAQ</h3>\n  <h4>Wo finde ich die Karteikarten zu meiner Vorlesung?</h4>\n  <p>\n    Auf unserer <a routerLink=\"/\">Startseite</a> findest du eine Liste aller\n    Vorlesungen, für die bisher Karten hinzugefügt wurden. Wähle deine Vorlesung\n    aus. Falls du die Vorlesung nich in der Liste findest, dann kannst du sie\n    hinzufügen indem du das Formular ausfüllst und auf \"Hinzufügen\" drückst.\n    <br />\n    Nachdem du auf die Vorlesung gedrückt hast kommst du auf eine neue Seite,\n    auf der du dir alle Karteikarten, die zu der Vorlesung bereits hinzugefügt\n    wurden, anschauen. Nutze die Pfeiltasten oder wische horizontal über die\n    Karte, um dir weitere Karten anzuschauen. Du kannst den Inhalt der Karte\n    aufklappen indem du auf \"Mehr dazu\" drückst. <br />\n    Du kannst auch die Suchfunktion in der Navigationsleiste nutzen, um nach\n    bestimmten Karten zu suchen.\n  </p>\n  <h4>Wie erstelle ich eine Karte?</h4>\n  <p>\n    Auf unserer <a routerLink=\"/\">Startseite</a> siehst du eine Liste von\n    Vorlesungen. Wähle die Vorlesung aus zu der du eine Karteikarte hinzufügen\n    möchtest. Falls deine Vorlesung nicht findest, kannst du sie über das\n    Formular hinzufügen. <br />\n    Nachdem du auf die Seite der Vorlesung navigiert bist kannst du eine neue\n    Karte hinzufügen indem du auf das <i class=\"fas fa-plus\"></i> Symbol unter\n    der Überschrift drückst. Nun kannst du deine Karteikarte hinzufügen indem du\n    das Formular ausfüllst und auf \"Hinzufügen\" drückst.\n    <span *ngIf=\"!loggedIn\">\n      Erstelle am Besten einen\n      <a routerLink=\"/signup\"> Account</a>, oder\n      <a routerLink=\"/login\">logge dich ein</a>, damit du Ertseller dieser Karte\n      wirst und nur du diese bearbeiten kannst.\n    </span>\n    Pro-Tip: du kannst auch mathematische Symbole schreiben indem du Latex\n    Befehle verwendest und diese mit $ Zeichen umhüllst. Mehr zu den Latex\n    Befehlen findest du\n    <a href=\"https://en.wikibooks.org/wiki/LaTeX/Mathematics\">hier</a>.\n  </p>\n\n  <h4>Wie bearbeite ich eine Karte?</h4>\n  <p>\n    Wähle zuerst die Karteikarte aus die du bearbeiten möchtest. Drücke auf das\n    <i class=\"fas fa-pen\"></i> Symbol unter der Überschrift. Bearbeite deine\n    Karte im Formular und drücke auf \"Sichern\". Bitte beachte, dass du nur\n    öffentliche und deine eigenen Karten bearbeiten kannst. Karten, die von\n    anderen registrierten Nutzern erstellt worden sind kannst du leider nicht\n    bearbeit. In einer späteren Version wird es möglich sein für diese Karte\n    einen Verberungsvorschlag an den Ertseller der Karte zu senden.\n  </p>\n</div>\n<app-footer></app-footer>\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { UserService } from \"src/app/services/user.service\";\r\n\r\n@Component({\r\n  selector: \"app-account-page\",\r\n  templateUrl: \"./account-page.component.html\",\r\n  styleUrls: [\"./account-page.component.css\"],\r\n})\r\nexport class AccountPageComponent implements OnInit {\r\n  public page: string;\r\n  public cardCount = 0;\r\n  constructor(private userService: UserService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.page = \"overview\";\r\n    this.userService.getUserInfo().subscribe((info) => {\r\n      if (info && info.cards) {\r\n        this.cardCount = info.cards.length;\r\n      } else {\r\n        this.cardCount = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  changePage(e: Event, s: string) {\r\n    e.preventDefault;\r\n    this.page = s;\r\n  }\r\n  setClass(s: string) {\r\n    if (this.page === s) {\r\n      return \"list-group-item list-group-item-action active\";\r\n    } else {\r\n      return \"list-group-item list-group-item-action\";\r\n    }\r\n  }\r\n}\r\n","<app-nav-bar></app-nav-bar>\r\n<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-4 col-xs-12\">\r\n      <div class=\"list-group\">\r\n        <button\r\n          [class]=\"setClass('overview')\"\r\n          (click)=\"changePage($event, 'overview')\"\r\n        >\r\n          Übersicht\r\n        </button>\r\n        <button\r\n          [class]=\"setClass('management')\"\r\n          (click)=\"changePage($event, 'management')\"\r\n        >\r\n          Profildaten ändern\r\n        </button>\r\n        <button\r\n          *ngIf=\"cardCount > 0\"\r\n          [class]=\"setClass('cards')\"\r\n          (click)=\"changePage($event, 'cards')\"\r\n        >\r\n          Karteikarten\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"col-md-8 col-xs-12\" [ngSwitch]=\"page\">\r\n      <app-overview *ngSwitchCase=\"'overview'\"></app-overview>\r\n      <app-change-profile *ngSwitchCase=\"'management'\"></app-change-profile>\r\n      <app-cards-overview *ngSwitchCase=\"'cards'\"></app-cards-overview>\r\n    </div>\r\n  </div>\r\n</div>\r\n<app-footer></app-footer>\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  HostListener,\r\n  ViewChild,\r\n  ElementRef,\r\n} from \"@angular/core\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { StatesService } from \"../../services/states.service\";\r\nimport { Vorlesung } from \"src/app/models/Vorlesung\";\r\nimport { CardsService } from \"src/app/services/cards.service\";\r\nimport { Card } from \"../../models/Card\";\r\nimport { Title } from \"@angular/platform-browser\";\r\n@Component({\r\n  selector: \"app-cards-page\",\r\n  templateUrl: \"./cards-page.component.html\",\r\n  styleUrls: [\"./cards-page.component.css\"],\r\n})\r\nexport class CardsPageComponent implements OnInit {\r\n  public vlAbrv: string;\r\n  public lecture: Vorlesung;\r\n  public loading: boolean = true;\r\n  public formMode: string = \"none\";\r\n  public cards: Card[];\r\n\r\n  private inTypingField: boolean;\r\n  @ViewChild(\"alert\", { static: false }) alert: ElementRef;\r\n\r\n  @HostListener(\"click\", [\"$event.target\"])\r\n  onClick() {\r\n    this.stateServie.setHideSuggestions(true);\r\n  }\r\n  @HostListener(\"window:keyup\", [\"$event\"])\r\n  handleKeyDown(event: KeyboardEvent) {\r\n    if (!this.inTypingField) {\r\n      if (event.key == \"ArrowRight\") {\r\n        this.cardsService.goNext();\r\n      } else if (event.key == \"ArrowLeft\") {\r\n        this.cardsService.goPrev();\r\n      }\r\n    }\r\n  }\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private stateServie: StatesService,\r\n    private cardsService: CardsService,\r\n    private http: HttpService,\r\n    private title: Title\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.title.setTitle(\"Cards\");\r\n    this.vlAbrv = this.route.snapshot.paramMap.get(\"abrv\");\r\n    this.cardsService.getCards().subscribe((cards) => {\r\n      if (cards.length == 0) {\r\n        this.stateServie.setFormMode(\"add\");\r\n      }\r\n    });\r\n    this.stateServie.getTyping().subscribe((val) => (this.inTypingField = val));\r\n    this.stateServie\r\n      .getLoadingState()\r\n      .subscribe((value) => (this.loading = value));\r\n    this.stateServie.getFormMode().subscribe((mode) => (this.formMode = mode));\r\n  }\r\n\r\n  setLoading(loading: boolean): void {\r\n    this.loading = loading;\r\n    this.stateServie.setLoadingState(loading);\r\n  }\r\n}\r\n","<app-nav-bar></app-nav-bar>\r\n<br />\r\n<div class=\"container\">\r\n  <app-carousel></app-carousel>\r\n  <br />\r\n  <app-add-card-form *ngIf=\"formMode == 'add'\"></app-add-card-form>\r\n  <app-update-card-form *ngIf=\"formMode == 'edit'\"></app-update-card-form>\r\n</div>\r\n\r\n<app-footer></app-footer>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Vorlesung } from \"../../models/Vorlesung\";\r\nimport { StatesService } from \"../../services/states.service\";\r\n\r\n@Component({\r\n  selector: \"app-home-page\",\r\n  templateUrl: \"./home-page.component.html\",\r\n  styleUrls: [\"./home-page.component.css\"],\r\n})\r\nexport class HomePageComponent implements OnInit {\r\n  public loading: boolean = false;\r\n  public newVl: Vorlesung;\r\n  constructor(private statesService: StatesService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.statesService.getLoadingState().subscribe((val) => {\r\n      this.loading = val;\r\n    });\r\n  }\r\n\r\n  emitVl(lecture: Vorlesung) {\r\n    this.newVl = lecture;\r\n  }\r\n}\r\n","<app-nav-bar></app-nav-bar>\r\n\r\n<div class=\"container\">\r\n  <app-lectures [newVl]=\"newVl\"></app-lectures>\r\n  <br />\r\n  <app-add-lecture-form></app-add-lecture-form>\r\n</div>\r\n<app-footer></app-footer>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-login-page',\r\n  templateUrl: './login-page.component.html',\r\n  styleUrls: ['./login-page.component.css']\r\n})\r\nexport class LoginPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<app-nav-bar></app-nav-bar>\r\n<div>\r\n  <app-login-form></app-login-form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-signup-page',\r\n  templateUrl: './signup-page.component.html',\r\n  styleUrls: ['./signup-page.component.css']\r\n})\r\nexport class SignupPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<app-nav-bar></app-nav-bar>\r\n<div>\r\n  <app-signup-form></app-signup-form>\r\n</div>\r\n","import { Injectable } from \"@angular/core\";\r\n\r\nimport { Observable, BehaviorSubject } from \"rxjs\";\r\nimport { Card } from \"../models/Card\";\r\nimport { StatesService } from \"./states.service\";\r\nimport { tap, map } from \"rxjs/operators\";\r\nimport { Router } from \"@angular/router\";\r\nimport { HttpConfig } from \"./config\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { NotificationsService } from \"./notifications.service\";\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class CardsService {\r\n  //contains lecture abreviation of the current lecutre\r\n  private abrv: string;\r\n  //loads cards once from the server and whenever lecture changes\r\n  //and provides them as an Observable\r\n  private cards$: BehaviorSubject<Card[]> = new BehaviorSubject<Card[]>([]);\r\n  //provides a Subject to set a new index on which card the carousel should show\r\n  private newCardIndex$: BehaviorSubject<number> = new BehaviorSubject<number>(\r\n    0\r\n  );\r\n  //provides a Subject of the index of the card that is currently shown\r\n  //only the carousel shoul set nex values for this subject\r\n  private activeCardIndex$: BehaviorSubject<number> = new BehaviorSubject<\r\n    number\r\n  >(0);\r\n\r\n  private config = new HttpConfig();\r\n  constructor(\r\n    private notifications: NotificationsService,\r\n    private http: HttpClient, //to make calls to the server\r\n    private statesService: StatesService, //for setting the loading state\r\n    private router: Router //used to get the lecture abreviation from the route\r\n  ) {}\r\n\r\n  getCards(): Observable<Card[]> {\r\n    this.statesService.setLoadingState(true);\r\n    let abrv = this.router.url.split(/vorlesung\\//)[1]; //get the lecture abreviation from the route\r\n    if (this.abrv === abrv) {\r\n      //cards were already loaded for this lecture\r\n      this.statesService.setLoadingState(false);\r\n      return this.cards$.asObservable();\r\n    } else {\r\n      this.abrv = abrv;\r\n      //remove the old cards before fetching the new ones\r\n      this.cards$.next([]);\r\n      //make server request\r\n      this.http\r\n        .get<Card[]>(this.config.urlBase + \"cards/?abrv=\" + abrv, {\r\n          observe: \"response\",\r\n        })\r\n        .subscribe(\r\n          (response) => {\r\n            this.statesService.setLoadingState(false);\r\n            this.cards$.next(response.body);\r\n          },\r\n          (error) => {\r\n            this.notifications.handleErrors(error);\r\n            this.statesService.setLoadingState(false);\r\n          }\r\n        );\r\n      return this.cards$.asObservable();\r\n    }\r\n  }\r\n\r\n  updateCard(card: Card, index: number): Observable<any> {\r\n    this.statesService.setLoadingState(true);\r\n    //send update to server using http service\r\n    return this.http\r\n      .put<any>(\r\n        this.config.urlBase + \"cards/update\",\r\n        { card: card },\r\n        {\r\n          headers: this.config.headers,\r\n          observe: \"response\",\r\n        }\r\n      )\r\n      .pipe(\r\n        tap(\r\n          (resp) => {\r\n            this.statesService.setLoadingState(false);\r\n            this.statesService.setFormMode(\"reset\"); //reset form to its previous state\r\n            //update subject\r\n            let cards = this.cards$.getValue();\r\n            cards[index] = card;\r\n            this.cards$.next(cards);\r\n            setTimeout(() => {\r\n              //show new card timeout needed because the carousel needs time to refresh\r\n              //its view\r\n              this.setNewCardIndex(index);\r\n            }, 100);\r\n          },\r\n          (error) => {\r\n            this.notifications.handleErrors(error);\r\n            this.statesService.setLoadingState(false);\r\n          }\r\n        )\r\n      );\r\n  }\r\n\r\n  addCard(card: Card): Observable<any> {\r\n    this.statesService.setLoadingState(true);\r\n    //send new card to server using http service\r\n    return this.http\r\n      .post<any>(\r\n        this.config.urlBase + \"cards/new\",\r\n        { card: card },\r\n        {\r\n          headers: this.config.headers,\r\n          observe: \"response\",\r\n        }\r\n      )\r\n      .pipe(\r\n        tap(\r\n          (response) => {\r\n            this.statesService.setLoadingState(false);\r\n            card._id = response.body.id; //set id received from server response\r\n            //upate subject\r\n            let cards = this.cards$.getValue();\r\n            cards.push(card);\r\n            this.cards$.next(cards);\r\n\r\n            setTimeout(() => {\r\n              //show new card timeout needed because the carousel needs time to refresh\r\n              //its view\r\n              this.setNewCardIndex(cards.length - 1);\r\n            }, 100);\r\n          },\r\n          (error) => {\r\n            this.notifications.handleErrors(error);\r\n            this.statesService.setLoadingState(false);\r\n          }\r\n        ),\r\n        map((res) => res.body)\r\n      );\r\n  }\r\n  goNext() {\r\n    //show the next slide index\r\n    let index = this.newCardIndex$.getValue();\r\n    index++;\r\n    if (index >= this.cards$.getValue().length) {\r\n      index = 0;\r\n    }\r\n    this.newCardIndex$.next(index);\r\n  }\r\n  goPrev() {\r\n    //show the next slide index\r\n    let index = this.newCardIndex$.getValue();\r\n    index--;\r\n    if (index < 0) {\r\n      index = this.cards$.getValue().length - 1;\r\n    }\r\n    this.newCardIndex$.next(index);\r\n  }\r\n  //only the carousel should be subscribed to this\r\n  getNewCardIndex(): Observable<number> {\r\n    return this.newCardIndex$.asObservable();\r\n  }\r\n  //use this function to tell the carousel to go to a specific slide i\r\n  setNewCardIndex(i: number) {\r\n    this.newCardIndex$.next(i);\r\n  }\r\n  //only the carousel should call this method (on the sliding event)\r\n  setActiveCardIndex(i: number) {\r\n    this.activeCardIndex$.next(i);\r\n  }\r\n  //subsribe to this function to always get the index of the card that is currently shown\r\n  getActiveCardIndex(): Observable<number> {\r\n    return this.activeCardIndex$.asObservable();\r\n  }\r\n}\r\n","import { HttpHeaders } from \"@angular/common/http\";\r\n\r\nexport class HttpConfig {\r\n  urlBase: string = \"api/\";\r\n  headers = new HttpHeaders({ \"Content-Type\": \"application/json\" });\r\n  constructor() {}\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders, HttpResponse } from \"@angular/common/http\";\r\nimport { Observable, BehaviorSubject } from \"rxjs\";\r\nimport { tap, map } from \"rxjs/operators\";\r\nimport { StatesService } from \"./states.service\";\r\nimport { NotificationsService } from \"./notifications.service\";\r\nimport { Router } from \"@angular/router\";\r\n//Models\r\nimport { Vorlesung } from \"../models/Vorlesung\";\r\nimport { HttpError } from \"../models/Notification\";\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class HttpService {\r\n  private urlBase: string = \"api/\"; //url  base on which to adress the server with\r\n\r\n  private lecture$: BehaviorSubject<Vorlesung> = new BehaviorSubject<Vorlesung>(\r\n    new Vorlesung(\"\", \"\")\r\n  ); //holds the current lecture\r\n  private lectures$: BehaviorSubject<Vorlesung[]>; //holds all lectures\r\n\r\n  private httpOptions = {\r\n    headers: new HttpHeaders({ \"Content-Type\": \"application/json\" }),\r\n  };\r\n\r\n  constructor(\r\n    private notifications: NotificationsService,\r\n    private http: HttpClient, //for sending http requests\r\n    private statesService: StatesService, //set the loading state\r\n    private router: Router //to get info in the current url\r\n  ) {}\r\n\r\n  //get an array of all lectures\r\n  getAllLectures(): Observable<Vorlesung[]> {\r\n    this.statesService.setLoadingState(true);\r\n    if (this.lectures$) {\r\n      //lectures were already loaded once\r\n      this.statesService.setLoadingState(false);\r\n      return this.lectures$.asObservable();\r\n    } else {\r\n      //load lectures from the server\r\n      return this.http\r\n        .get<Vorlesung[]>(this.urlBase + \"lectures\", {\r\n          observe: \"response\",\r\n        })\r\n        .pipe(\r\n          tap(\r\n            (res) => {\r\n              this.statesService.setLoadingState(false);\r\n              this.lectures$ = new BehaviorSubject<Vorlesung[]>(res.body); //set the lectures subject\r\n            },\r\n            (error) => {\r\n              this.addErrors(error);\r\n              this.statesService.setLoadingState(false);\r\n            }\r\n          ),\r\n          map((res) => res.body)\r\n        );\r\n    }\r\n  }\r\n\r\n  //get the Current lecture\r\n  getCurrentLecture(): Observable<Vorlesung> {\r\n    let abrv = this.router.url.split(/vorlesung\\//)[1]; //get the abreviation of the lecture from the url\r\n    if (this.lecture$.getValue().abrv == abrv) {\r\n      //the lecture was already loaded\r\n      return this.lecture$.asObservable();\r\n    } else {\r\n      //fetch the lecture from the server\r\n      this.http\r\n        .get<Vorlesung>(this.urlBase + \"lectures/find?abrv=\" + abrv, {\r\n          observe: \"response\",\r\n        })\r\n        .subscribe(\r\n          (res) => {\r\n            this.lecture$.next(res.body);\r\n          },\r\n          (error) => {\r\n            this.addErrors(error);\r\n            this.statesService.setLoadingState(false);\r\n          }\r\n        );\r\n      return this.lecture$.asObservable();\r\n    }\r\n  }\r\n\r\n  //add a lecture to the database on the server\r\n  addLecture(lecture: Vorlesung): Observable<HttpResponse<any>> {\r\n    this.statesService.setLoadingState(true);\r\n    return this.http\r\n      .post<any>(\r\n        this.urlBase + \"lectures/new\",\r\n        { lecture: lecture },\r\n        {\r\n          headers: this.httpOptions.headers,\r\n          observe: \"response\",\r\n        }\r\n      )\r\n      .pipe(\r\n        tap(\r\n          (res) => {\r\n            //add the new lecture to the lectures subject\r\n            this.statesService.setLoadingState(false);\r\n            let lectures = this.lectures$.getValue();\r\n            lectures.push(lecture);\r\n            this.lectures$.next(lectures);\r\n          },\r\n          (error) => {\r\n            this.addErrors(error);\r\n            this.statesService.setLoadingState(false);\r\n          }\r\n        )\r\n      );\r\n  }\r\n\r\n  //because errors suck and we dont have a unified error handling system in the backend\r\n\r\n  addErrors(error) {\r\n    let err = error.error;\r\n    console.log(error);\r\n    if (error.status == 400) {\r\n      this.notifications.addNotification(\r\n        new HttpError(\"Bitte logge dich erst ein.\", error.status)\r\n      );\r\n      this.router.navigateByUrl(\"/login\");\r\n    } else if (error.status == 422) {\r\n      if (typeof err == \"string\") {\r\n        this.notifications.addNotification(new HttpError(err, error.status));\r\n      } else if (typeof err == \"object\") {\r\n        this.notifications.addNotification(\r\n          new HttpError(\r\n            \"Ein unbekannter Fehler ist aufgetreten. Versuche es später erneut.\",\r\n            error.status\r\n          )\r\n        );\r\n        console.log(err);\r\n      } else {\r\n        for (const e of err) {\r\n          this.notifications.addNotification(new HttpError(e, error.status));\r\n        }\r\n      }\r\n    } else if (error.status >= 500) {\r\n      this.notifications.addNotification(\r\n        new HttpError(\r\n          \"Der Server scheint offline zu sein. Versuche es später erneut.\",\r\n          error.status\r\n        )\r\n      );\r\n    } else {\r\n      this.notifications.addNotification(\r\n        new HttpError(\r\n          \"Ein unbekannter Fehler ist aufgetreten. Versuche es später erneut.\",\r\n          error.status\r\n        )\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\nimport { Observable, BehaviorSubject } from \"rxjs\";\nimport { Notification, HttpError, InfoMessage } from \"../models/Notification\";\nimport { Router } from \"@angular/router\";\n@Injectable({\n  providedIn: \"root\",\n})\nexport class NotificationsService {\n  private notifications$ = new BehaviorSubject<Notification[]>([]);\n  constructor(private router: Router) {}\n\n  addNotification(n: Notification) {\n    let notifications = this.notifications$.getValue();\n    notifications.push(n);\n  }\n\n  //removes a specific error from the error array\n  removeNotification(index: number) {\n    let notifications = this.notifications$.getValue();\n    notifications.splice(index, 1); //remove error at position index\n    this.notifications$.next(notifications);\n  }\n  clearNotifications() {\n    this.notifications$.next([]);\n  }\n  removeLoginInfo() {\n    let notifs = this.notifications$.getValue();\n    for (let i = 0; i < notifs.length; i++) {\n      if (notifs[i] instanceof InfoMessage) {\n        //only check if notif is of type InfoMessage as LoginInfo is the only info message for now\n        this.removeNotification(i);\n      }\n    }\n  }\n  getNotifications(): Observable<Notification[]> {\n    return this.notifications$.asObservable();\n  }\n\n  //because errors suck and we dont have a unified error handling system in the backend\n  handleErrors(error) {\n    let err = error.error;\n    console.log(error);\n    if (error.status == 400) {\n      this.addNotification(\n        new InfoMessage(\"Du musst dich einloggen, um diese Seite zu besuchen\")\n      );\n    } else if (error.status == 422) {\n      if (typeof err == \"string\") {\n        this.addNotification(new HttpError(err, error.status));\n      } else if (typeof err == \"object\") {\n        this.addNotification(\n          new HttpError(\n            \"Ein unbekannter Fehler ist aufgetreten. Versuche es später erneut.\",\n            error.status\n          )\n        );\n        console.log(err);\n      } else {\n        for (const e of err) {\n          this.addNotification(new HttpError(e, error.status));\n        }\n      }\n    } else if (error.status >= 500) {\n      this.addNotification(\n        new HttpError(\n          \"Der Server scheint offline zu sein. Versuche es später erneut.\",\n          error.status\n        )\n      );\n    } else {\n      this.addNotification(\n        new HttpError(\n          \"Ein unbekannter Fehler ist aufgetreten. Versuche es später erneut.\",\n          error.status\n        )\n      );\n    }\n  }\n}\n","//This service is made to manage states across components\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class StatesService {\r\n  private formMode$: BehaviorSubject<string> = new BehaviorSubject(\"none\");\r\n  private lastFormMode: string;\r\n  private loading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n  private hideSgtn$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n  private typing$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n  constructor() {}\r\n\r\n  getFormMode(): Observable<string> {\r\n    return this.formMode$.asObservable();\r\n  }\r\n  setFormMode(mode: string): void {\r\n    if (mode == \"reset\") {\r\n      if (!this.lastFormMode) {\r\n        //last form mode is undefined\r\n        this.lastFormMode = \"none\";\r\n      } // last Form mode defined\r\n      this.formMode$.next(this.lastFormMode);\r\n    } else {\r\n      this.formMode$.next(mode);\r\n      if (mode != \"edit\") this.lastFormMode = mode;\r\n    }\r\n  }\r\n  setTyping(val: boolean) {\r\n    this.typing$.next(val);\r\n  }\r\n  getTyping(): Observable<boolean> {\r\n    return this.typing$.asObservable();\r\n  }\r\n  getLoadingState(): BehaviorSubject<boolean> {\r\n    return this.loading$;\r\n  }\r\n  setLoadingState(value: boolean) {\r\n    this.loading$.next(value);\r\n  }\r\n  setHideSuggestions(value: boolean) {\r\n    this.hideSgtn$.next(value);\r\n  }\r\n  getHideSuggestions(): Observable<boolean> {\r\n    return this.hideSgtn$.asObservable();\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\nimport { UserInfo } from \"../models/userInfo\";\nimport { Observable, BehaviorSubject } from \"rxjs\";\nimport { Router, CanActivate } from \"@angular/router\";\nimport { tap, map } from \"rxjs/operators\";\nimport { InfoMessage, HttpError, SuccessMessage } from \"../models/Notification\";\nimport { NotificationsService } from \"./notifications.service\";\nimport { HttpConfig } from \"./config\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { StatesService } from \"./states.service\";\nimport { User } from \"../models/User\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class UserService implements CanActivate {\n  private auth$: BehaviorSubject<boolean>; //subject which is true if user is authenticated\n  private userId$ = new BehaviorSubject<string>(null);\n  private accountInfo$: BehaviorSubject<UserInfo>; //stores account info of the user used\n  private config = new HttpConfig();\n  constructor(\n    private http: HttpClient, //for sending http requests\n    private statesService: StatesService,\n    private router: Router,\n    private notifications: NotificationsService\n  ) {}\n\n  canActivate(): boolean {\n    if (!this.auth$) {\n      if (localStorage.getItem(\"userId\")) {\n        return true;\n      } else {\n        this.notifications.addNotification(\n          new InfoMessage(\"Du musst dich einloggen, um diese Seite zu besuchen\")\n        );\n        this.setUser(null);\n        this.router.navigate([\"login\"]);\n        return false;\n      }\n    } else if (this.auth$.getValue()) {\n      return true;\n    } else {\n      this.setUser(null);\n      return false;\n    }\n  }\n  //used to login the user\n  login(form) {\n    this.statesService.setLoadingState(true);\n    return this.http\n      .post<User>(this.config.urlBase + \"login\", form, {\n        headers: this.config.headers,\n        observe: \"response\",\n      })\n      .pipe(\n        tap(\n          (res) => {\n            this.statesService.setLoadingState(false);\n            this.setUser(res.body._id, form.remember);\n            this.notifications.removeLoginInfo();\n            this.notifications.addNotification(\n              new SuccessMessage(`Herzlich willkommen ${res.body.username}`)\n            );\n          },\n          (error) => {\n            this.notifications.handleErrors(error);\n            this.setUser(null);\n            this.statesService.setLoadingState(false);\n          }\n        )\n      );\n  }\n  createAccount(form): Observable<User> {\n    return this.http\n      .post<User>(this.config.urlBase + \"user/new\", form, {\n        headers: this.config.headers,\n        observe: \"response\",\n      })\n      .pipe(\n        tap(\n          (res) => {\n            this.setUser(res.body._id);\n            this.statesService.setLoadingState(false);\n          },\n          (error) => {\n            this.notifications.handleErrors(error);\n            this.statesService.setLoadingState(false);\n          }\n        ),\n        map((res) => res.body)\n      );\n  }\n\n  getUserId(): Observable<string> {\n    return this.userId$.asObservable();\n  }\n\n  logout() {\n    this.statesService.setLoadingState(true);\n    this.http\n      .get<any>(this.config.urlBase + \"user/logout\", { observe: \"response\" })\n      .subscribe(\n        (res) => {\n          this.statesService.setLoadingState(false);\n          this.setUser(null);\n          this.notifications.addNotification(\n            new SuccessMessage(\"Erfolgreich abgemeldet\")\n          );\n        },\n        (error) => {\n          this.notifications.handleErrors(error);\n          this.statesService.setLoadingState(false);\n        }\n      );\n  }\n\n  authentication(): Observable<boolean> {\n    if (this.auth$) {\n      return this.auth$.asObservable();\n    } else {\n      let id = localStorage.getItem(\"userId\");\n      if (id) {\n        this.auth$ = new BehaviorSubject<boolean>(true);\n        this.userId$.next(id);\n      } else {\n        this.auth$ = new BehaviorSubject<boolean>(false);\n      }\n      return this.auth$.asObservable();\n    }\n  }\n\n  getUserInfo(): Observable<UserInfo> {\n    if (this.accountInfo$) {\n      return this.accountInfo$.asObservable();\n    } else {\n      this.accountInfo$ = new BehaviorSubject<UserInfo>(null);\n      this.http\n        .get<UserInfo>(this.config.urlBase + \"user/info\", {\n          observe: \"response\",\n        })\n        .subscribe(\n          (res) => {\n            for (const card of res.body.cards) {\n              card.date = new Date(card.date);\n            }\n\n            this.accountInfo$.next(res.body);\n          },\n          (error) => {\n            this.statesService.setLoadingState(false);\n            this.notifications.handleErrors(error);\n          }\n        );\n      return this.accountInfo$.asObservable();\n    }\n  }\n  updateAccount(form) {\n    this.statesService.setLoadingState(true);\n    this.http\n      .put<any>(this.config.urlBase + \"user/updateAccount\", form, {\n        headers: this.config.headers,\n        observe: \"response\",\n      })\n      .subscribe(\n        (res) => {\n          this.statesService.setLoadingState(false);\n\n          let info = this.accountInfo$.getValue();\n          info.user = form;\n          this.accountInfo$.next(info);\n          this.notifications.addNotification(\n            new SuccessMessage(\n              \"Deine Informationen wurden erfolgreich aktualisiert\"\n            )\n          );\n        },\n        (error) => {\n          this.notifications.handleErrors(error);\n          this.statesService.setLoadingState(false);\n        }\n      );\n  }\n\n  updatePassword(form) {\n    this.statesService.setLoadingState(true);\n    return this.http\n      .put<any>(this.config.urlBase + \"user/updatePassword\", form, {\n        headers: this.config.headers,\n        observe: \"response\",\n      })\n      .pipe(\n        tap(\n          (res) => {\n            this.statesService.setLoadingState(false);\n            this.notifications.addNotification(\n              new SuccessMessage(\"Dein Passwort wurde erfolgreich aktualisiert\")\n            );\n          },\n          (error) => {\n            this.notifications.handleErrors(error);\n            this.statesService.setLoadingState(false);\n          }\n        )\n      );\n  }\n\n  deleteAccount() {\n    console.log(\"not yet implemented\");\n  }\n  private setUser(id: string, remember?: boolean) {\n    if (id) {\n      this.userId$.next(id);\n      this.auth$.next(true);\n      if (remember) {\n        localStorage.setItem(\"userId\", JSON.stringify(id)); //store the user locally to keep the session\n      }\n    } else {\n      this.userId$.next(null);\n      this.auth$.next(false);\n      localStorage.removeItem(\"userId\");\n    }\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from \"@angular/core\";\r\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\r\nimport \"hammerjs\";\r\nimport { AppModule } from \"./app/app.module\";\r\nimport { environment } from \"./environments/environment\";\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic()\r\n  .bootstrapModule(AppModule)\r\n  .catch((err) => console.error(err));\r\n"]}