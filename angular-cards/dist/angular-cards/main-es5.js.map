{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/add-card-form/add-card-form.component.ts","webpack:///src/app/components/add-card-form/add-card-form.component.html","webpack:///src/app/components/add-lecture-form/add-lecture-form.component.ts","webpack:///src/app/components/add-lecture-form/add-lecture-form.component.html","webpack:///src/app/components/card/card.component.ts","webpack:///src/app/components/card/card.component.html","webpack:///src/app/components/cards-overview/cards-overview.component.ts","webpack:///src/app/components/cards-overview/cards-overview.component.html","webpack:///src/app/components/carousel/carousel.component.ts","webpack:///src/app/components/carousel/carousel.component.html","webpack:///src/app/components/change-profile/change-profile.component.ts","webpack:///src/app/components/change-profile/change-profile.component.html","webpack:///src/app/components/footer/footer.component.ts","webpack:///src/app/components/footer/footer.component.html","webpack:///src/app/components/lectures/lectures.component.ts","webpack:///src/app/components/lectures/lectures.component.html","webpack:///src/app/components/login-form/login-form.component.ts","webpack:///src/app/components/login-form/login-form.component.html","webpack:///src/app/components/nav-bar/nav-bar.component.ts","webpack:///src/app/components/nav-bar/nav-bar.component.html","webpack:///src/app/components/notifications/notifications.component.ts","webpack:///src/app/components/notifications/notifications.component.html","webpack:///src/app/components/overview/overview.component.ts","webpack:///src/app/components/overview/overview.component.html","webpack:///src/app/components/search-bar/search-bar.component.ts","webpack:///src/app/components/search-bar/search-bar.component.html","webpack:///src/app/components/signup-form/signup-form.component.ts","webpack:///src/app/components/signup-form/signup-form.component.html","webpack:///src/app/components/update-card-form/update-card-form.component.ts","webpack:///src/app/components/update-card-form/update-card-form.component.html","webpack:///src/app/components/update-card-form/dialog.html","webpack:///src/app/models/Card.ts","webpack:///src/app/models/Vorlesung.ts","webpack:///src/app/routes/about/about.component.ts","webpack:///src/app/routes/about/about.component.html","webpack:///src/app/routes/account-page/account-page.component.ts","webpack:///src/app/routes/account-page/account-page.component.html","webpack:///src/app/routes/cards-page/cards-page.component.ts","webpack:///src/app/routes/cards-page/cards-page.component.html","webpack:///src/app/routes/home-page/home-page.component.ts","webpack:///src/app/routes/home-page/home-page.component.html","webpack:///src/app/routes/login-page/login-page.component.ts","webpack:///src/app/routes/login-page/login-page.component.html","webpack:///src/app/routes/signup-page/signup-page.component.ts","webpack:///src/app/routes/signup-page/signup-page.component.html","webpack:///src/app/services/cards.service.ts","webpack:///src/app/services/http.service.ts","webpack:///src/app/services/states.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","router","titleService","setTitle","selector","templateUrl","styleUrls","MyHammerConfig","overrides","pan","direction","Hammer","DIRECTION_All","swipe","DIRECTION_VERTICAL","element","mc","touchAction","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","TouchInput","recognizers","Swipe","DIRECTION_HORIZONTAL","AppModule","provide","useClass","declarations","providers","bootstrap","AddCardFormComponent","cardsService","stateService","http","getCurrentLecture","subscribe","lecture","f","newCard","value","thema","content","abrv","addCard","res","reset","setTyping","color","length","elem","onSubmit","inField","resetNav","AddLectureFormComponent","statesService","emitVl","newLecture","name","toLowerCase","setLoadingState","addLecture","response","emit","field","max","CardComponent","cs","isCollapsed","getActiveCardIndex","change","hide","static","CardsOverviewComponent","CarouselComponent","httpService","activeSlide","event","carousel","previousSlide","nextSlide","getUser","user","title","getCards","cards","setFormMode","getFormMode","mode","formShow","formMode","getNewCardIndex","index","selectSlide","n","toString","rand","count","Math","floor","random","slideEvent","parseInt","relatedTarget","setActiveCardIndex","currCard","author","username","showRandomCard","enableEdit","toggleAddView","ChangeProfileComponent","getUserInfo","info","userInfo","form","console","log","password","password2","s1","s2","checkEmail","email","test","changeAccount","changePassword","FooterComponent","LecturesComponent","getAllLectures","lectures","newVl","push","LoginFormComponent","login","status","navigate","submit","NavBarComponent","loading","setPageTitle","getLoadingState","val","events","clearErrors","getErrors","errors","url","match","i","removeError","currentTitle","logout","NotificationsComponent","OverviewComponent","SearchBarComponent","getHideSuggestions","clearSuggestions","suggestions","forEach","card","setHideSuggestions","uInput","regex","RegExp","preventDefault","setNewCardIndex","findMatches","SignupFormComponent","createAccount","error","headers","UpdateCardFormComponent","dialog","activeCardIndex","cardCopy","cardIndex","updateCard","resp","dialogRef","open","DialogOverviewExampleDialog","width","cancelEdit","service","close","onNoClick","cancel","Card","Vorlesung","AboutComponent","loggedIn","AccountPageComponent","page","s","changePage","CardsPageComponent","route","stateServie","inTypingField","key","goNext","goPrev","vlAbrv","snapshot","paramMap","get","getTyping","HomePageComponent","LoginPageComponent","SignupPageComponent","CardsService","cards$","newCardIndex$","activeCardIndex$","split","asObservable","next","getCardsFromLectureAbrv","pipe","getValue","_id","body","setTimeout","providedIn","HttpService","urlBase","user$","lecture$","errors$","profileInfo$","httpOptions","observe","addErrors","post","put","lectures$","remember","localStorage","setItem","JSON","stringify","parse","getItem","removeItem","err","splice","StatesService","formMode$","loading$","hideSgtn$","typing$","lastFormMode","environment","production","catch"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from \"@angular/core\";\r\nimport { Routes, RouterModule } from \"@angular/router\";\r\nimport { HomePageComponent } from \"./routes/home-page/home-page.component\";\r\nimport { CardsPageComponent } from \"./routes/cards-page/cards-page.component\";\r\nimport { LoginPageComponent } from \"./routes/login-page/login-page.component\";\r\nimport { SignupPageComponent } from \"./routes/signup-page/signup-page.component\";\r\nimport { AboutComponent } from \"./routes/about/about.component\";\r\nimport { AccountPageComponent } from \"./routes/account-page/account-page.component\";\r\n\r\nconst routes: Routes = [\r\n  { path: \"\", component: HomePageComponent },\r\n  { path: \"vorlesung/:abrv\", component: CardsPageComponent },\r\n  { path: \"login\", component: LoginPageComponent },\r\n  { path: \"signup\", component: SignupPageComponent },\r\n  { path: \"about\", component: AboutComponent },\r\n  { path: \"account\", component: AccountPageComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n","import { Component } from \"@angular/core\";\r\nimport { Title } from \"@angular/platform-browser\";\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: \"app-root\",\r\n  templateUrl: \"./app.component.html\",\r\n  styleUrls: [\"./app.component.css\"],\r\n})\r\nexport class AppComponent {\r\n  public constructor(private router: Router, private titleService: Title) {\r\n    this.titleService.setTitle(\"Home\");\r\n  }\r\n}\r\n","<router-outlet></router-outlet>\r\n","//Modules\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { NgModule, Injectable } from \"@angular/core\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { NgbModule } from \"@ng-bootstrap/ng-bootstrap\";\r\nimport { AppRoutingModule } from \"./app-routing.module\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { MatProgressBarModule } from \"@angular/material/progress-bar\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport {\r\n  CarouselModule,\r\n  WavesModule,\r\n  CollapseModule,\r\n  TooltipModule,\r\n} from \"angular-bootstrap-md\";\r\nimport { KatexModule } from \"ng-katex\";\r\n\r\n//Components\r\nimport { AppComponent } from \"./app.component\";\r\nimport { NavBarComponent } from \"./components/nav-bar/nav-bar.component\";\r\nimport { SearchBarComponent } from \"./components/search-bar/search-bar.component\";\r\nimport { AddCardFormComponent } from \"./components/add-card-form/add-card-form.component\";\r\nimport { CarouselComponent } from \"./components/carousel/carousel.component\";\r\nimport { CardComponent } from \"./components/card/card.component\";\r\nimport { AddLectureFormComponent } from \"./components/add-lecture-form/add-lecture-form.component\";\r\nimport { LecturesComponent } from \"./components/lectures/lectures.component\";\r\nimport { HomePageComponent } from \"./routes/home-page/home-page.component\";\r\nimport { CardsPageComponent } from \"./routes/cards-page/cards-page.component\";\r\n//Services\r\nimport { StatesService } from \"./services/states.service\";\r\nimport { HttpService } from \"./services/http.service\";\r\n\r\n//Material Modules\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { UpdateCardFormComponent } from \"./components/update-card-form/update-card-form.component\";\r\n//Gestures\r\nimport {\r\n  HammerModule,\r\n  HammerGestureConfig,\r\n  HAMMER_GESTURE_CONFIG,\r\n} from \"@angular/platform-browser\";\r\nimport { LoginPageComponent } from \"./routes/login-page/login-page.component\";\r\nimport { LoginFormComponent } from \"./components/login-form/login-form.component\";\r\nimport { SignupPageComponent } from \"./routes/signup-page/signup-page.component\";\r\nimport { SignupFormComponent } from \"./components/signup-form/signup-form.component\";\r\nimport { StoreModule } from \"@ngrx/store\";\r\nimport { FooterComponent } from './components/footer/footer.component';\r\nimport { AboutComponent } from './routes/about/about.component';\r\nimport { AccountPageComponent } from './routes/account-page/account-page.component';\nimport { OverviewComponent } from './components/overview/overview.component';\nimport { ChangeProfileComponent } from './components/change-profile/change-profile.component';\nimport { CardsOverviewComponent } from './components/cards-overview/cards-overview.component';\nimport { NotificationsComponent } from './components/notifications/notifications.component';\r\n\r\ndeclare var Hammer: any;\r\n//Config to allow swipe gestures on carousel\r\n@Injectable()\r\nexport class MyHammerConfig extends HammerGestureConfig {\r\n  overrides = <any>{\r\n    pan: { direction: Hammer.DIRECTION_All },\r\n    swipe: { direction: Hammer.DIRECTION_VERTICAL },\r\n  };\r\n\r\n  buildHammer(element: HTMLElement) {\r\n    const mc = new Hammer(element, {\r\n      touchAction: \"auto\",\r\n      inputClass: Hammer.SUPPORT_POINTER_EVENTS\r\n        ? Hammer.PointerEventInput\r\n        : Hammer.TouchInput,\r\n      recognizers: [\r\n        [\r\n          Hammer.Swipe,\r\n          {\r\n            direction: Hammer.DIRECTION_HORIZONTAL,\r\n          },\r\n        ],\r\n      ],\r\n    });\r\n    return mc;\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavBarComponent,\r\n    SearchBarComponent,\r\n    AddCardFormComponent,\r\n    CarouselComponent,\r\n    CardComponent,\r\n    AddLectureFormComponent,\r\n    LecturesComponent,\r\n    HomePageComponent,\r\n    CardsPageComponent,\r\n    UpdateCardFormComponent,\r\n    LoginPageComponent,\r\n    LoginFormComponent,\r\n    SignupPageComponent,\r\n    SignupFormComponent,\r\n    FooterComponent,\r\n    AboutComponent,\r\n    AccountPageComponent,\r\n    OverviewComponent,\r\n    ChangeProfileComponent,\r\n    CardsOverviewComponent,\r\n    NotificationsComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    NgbModule,\r\n    FormsModule,\r\n    BrowserAnimationsModule,\r\n    MatProgressBarModule,\r\n    MatDialogModule,\r\n    CarouselModule,\r\n    WavesModule,\r\n    HammerModule,\r\n    CollapseModule,\r\n    TooltipModule,\r\n    StoreModule.forRoot({}, {}),\r\n    KatexModule,\r\n  ],\r\n  providers: [\r\n    StatesService,\r\n    HttpService,\r\n\r\n    {\r\n      provide: HAMMER_GESTURE_CONFIG,\r\n      useClass: MyHammerConfig,\r\n    },\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { StatesService } from \"../../services/states.service\";\r\nimport { CardsService } from \"../../services/cards.service\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { Card } from \"../../models/Card\";\r\nimport { Vorlesung } from \"src/app/models/Vorlesung\";\r\n\r\n@Component({\r\n  selector: \"app-add-card-form\",\r\n  templateUrl: \"./add-card-form.component.html\",\r\n  styleUrls: [\"./add-card-form.component.css\"],\r\n})\r\nexport class AddCardFormComponent implements OnInit {\r\n  lecture: Vorlesung;\r\n  newCard: Card;\r\n  hidden: boolean;\r\n  Contentlength: number;\r\n  themaLength: number;\r\n  constructor(\r\n    private cardsService: CardsService,\r\n    private stateService: StatesService,\r\n    private http: HttpService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.http\r\n      .getCurrentLecture()\r\n      .subscribe((lecture) => (this.lecture = lecture));\r\n  }\r\n  setStyle() {}\r\n  onSubmit(f: NgForm) {\r\n    this.newCard = new Card(f.value.thema, f.value.content, this.lecture.abrv);\r\n    this.cardsService.addCard(this.newCard).subscribe((res) => {\r\n      f.reset();\r\n    });\r\n  }\r\n  inField() {\r\n    this.stateService.setTyping(true);\r\n  }\r\n  resetNav() {\r\n    this.stateService.setTyping(false);\r\n  }\r\n  //Function to set style of small character indicator\r\n  setThemaCharIndicatorStyle(thema) {\r\n    if (thema.value) {\r\n      return {\r\n        color:\r\n          (thema.value && thema.value.length > 0 && thema.value.length < 3) ||\r\n          thema.value.length > 60\r\n            ? \"#ff0000\"\r\n            : \"#000000\",\r\n      };\r\n    } else {\r\n      return { color: \"#000000\" };\r\n    }\r\n  }\r\n  //Function to set style of small character indicator\r\n  setContentCharIndicatorStyle(content) {\r\n    if (content.value) {\r\n      return {\r\n        color:\r\n          content.value && content.value.length > 400 ? \"#ff0000\" : \"#000000\",\r\n      };\r\n    } else {\r\n      return { color: \"#000000\" };\r\n    }\r\n  }\r\n\r\n  getLength(elem) {\r\n    if (elem.value) {\r\n      return elem.value.length;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  isDisabled(content, thema) {\r\n    if (!content.value || !thema.value) {\r\n      return true;\r\n    }\r\n    return (\r\n      content.value.length > 400 ||\r\n      (thema.value.length > 0 && thema.value.length < 3) ||\r\n      thema.value.length > 60\r\n    );\r\n  }\r\n}\r\n","<div id=\"addCard\">\r\n  <form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\" novalidate>\r\n    <h4>Karteikarte hinzufügen</h4>\r\n    <div class=\"form-group\">\r\n      <label for=\"thema\">Überschrift</label>\r\n      <input\r\n        class=\"form-control\"\r\n        id=\"thema\"\r\n        name=\"thema\"\r\n        type=\"text\"\r\n        placeholder=\"Thema\"\r\n        minlength=\"3\"\r\n        required\r\n        #thema=\"ngModel\"\r\n        ngModel\r\n        (focus)=\"inField()\"\r\n        (blur)=\"resetNav()\"\r\n      />\r\n      <small\r\n        class=\"form-text float-right\"\r\n        [ngStyle]=\"setThemaCharIndicatorStyle(thema)\"\r\n        >{{ getLength(thema) }}/60\r\n      </small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"content\">Informationen</label>\r\n      <textarea\r\n        class=\"form-control\"\r\n        id=\"content\"\r\n        name=\"content\"\r\n        rows=\"5\"\r\n        required\r\n        #content=\"ngModel\"\r\n        ngModel\r\n        (focus)=\"inField()\"\r\n        (blur)=\"resetNav()\"\r\n      ></textarea>\r\n      <small\r\n        class=\"form-text float-right\"\r\n        [ngStyle]=\"setContentCharIndicatorStyle(content)\"\r\n        >{{ getLength(content) }}/400\r\n      </small>\r\n    </div>\r\n\r\n    <input\r\n      class=\"btn btn-primary mb-2\"\r\n      id=\"addBtn\"\r\n      type=\"submit\"\r\n      value=\"Hinzufügen\"\r\n      [disabled]=\"isDisabled(content, thema)\"\r\n    />\r\n  </form>\r\n</div>\r\n","import { Component, OnInit, Output, EventEmitter } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Vorlesung } from \"../../models/Vorlesung\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { StatesService } from \"../../services/states.service\";\r\n@Component({\r\n  selector: \"app-add-lecture-form\",\r\n  templateUrl: \"./add-lecture-form.component.html\",\r\n  styleUrls: [\"./add-lecture-form.component.css\"],\r\n})\r\nexport class AddLectureFormComponent implements OnInit {\r\n  constructor(\r\n    private http: HttpService,\r\n    private statesService: StatesService\r\n  ) {}\r\n  @Output() emitVl: EventEmitter<Vorlesung> = new EventEmitter();\r\n  ngOnInit(): void {}\r\n  onSubmit(f: NgForm) {\r\n    let newLecture = new Vorlesung(f.value.name, f.value.abrv.toLowerCase());\r\n    this.statesService.setLoadingState(true);\r\n    this.http.addLecture(newLecture).subscribe((response) => {\r\n      this.statesService.setLoadingState(false);\r\n      this.emitVl.emit(newLecture);\r\n    });\r\n\r\n    f.reset();\r\n  }\r\n\r\n  setCharIndicatorStyle(field, max: number) {\r\n    if (field.value) {\r\n      return {\r\n        color: field.value.length > max ? \"#ff0000\" : \"#000000\",\r\n      };\r\n    } else {\r\n      return { color: \"#000000\" };\r\n    }\r\n  }\r\n  getLength(elem) {\r\n    if (elem.value) {\r\n      return elem.value.length;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n  isDisabled(name, abrv) {\r\n    if (!name.value || !abrv.value) {\r\n      return true;\r\n    } else {\r\n      return (\r\n        abrv.value.length == 0 ||\r\n        abrv.value.length < 3 ||\r\n        abrv.value.length > 7 ||\r\n        name.value.length == 0 ||\r\n        name.value.length > 60\r\n      );\r\n    }\r\n  }\r\n}\r\n","<div id=\"addLecture\">\r\n  <form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\" novalidate>\r\n    <h4>Vorlesung hinzufügen</h4>\r\n    <div class=\"form-group\">\r\n      <label for=\"name\">Vorlesungsname</label>\r\n      <input\r\n        class=\"form-control\"\r\n        id=\"name\"\r\n        name=\"name\"\r\n        type=\"text\"\r\n        placeholder=\"Datenstrukturen und Algorithmen\"\r\n        minlength=\"3\"\r\n        required\r\n        #name=\"ngModel\"\r\n        ngModel\r\n      />\r\n      <small\r\n        class=\"form-text float-right\"\r\n        [ngStyle]=\"setCharIndicatorStyle(name, 60)\"\r\n        >{{ getLength(name) }}/60\r\n      </small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"abrv\">Abkürzung</label>\r\n      <input\r\n        class=\"form-control\"\r\n        id=\"abrv\"\r\n        name=\"abrv\"\r\n        required\r\n        #abrv=\"ngModel\"\r\n        ngModel\r\n        placeholder=\"Dsal\"\r\n      />\r\n      <small\r\n        class=\"form-text float-right\"\r\n        [ngStyle]=\"setCharIndicatorStyle(abrv, 7)\"\r\n        >{{ getLength(abrv) }}/7\r\n      </small>\r\n    </div>\r\n    <input\r\n      class=\"btn btn-primary mb-2\"\r\n      id=\"addBtn\"\r\n      type=\"submit\"\r\n      value=\"Hinzufügen\"\r\n      [disabled]=\"isDisabled(name, abrv)\"\r\n    />\r\n  </form>\r\n</div>\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { Card } from \"../../models/Card\";\r\nimport { KatexOptions } from \"ng-katex\";\r\nimport { ViewChild } from \"@angular/core\";\r\nimport { CardsService } from \"../../services/cards.service\";\r\n@Component({\r\n  selector: \"app-card\",\r\n  templateUrl: \"./card.component.html\",\r\n  styleUrls: [\"./card.component.css\"],\r\n})\r\nexport class CardComponent implements OnInit {\r\n  @Input() card: Card;\r\n  @ViewChild(\"test\", { static: true }) content;\r\n  constructor(private cs: CardsService) {}\r\n  public isCollapsed = true;\r\n  ngOnInit(): void {\r\n    this.cs.getActiveCardIndex().subscribe((change) => {\r\n      //hides te card content when carousel slides\r\n      this.content.hide();\r\n    });\r\n  }\r\n}\r\n","<div class=\"card\" id=\"`{{ card._id }}`\">\r\n  <div class=\"card-header\">\r\n    {{ card.thema }}\r\n  </div>\r\n  <div class=\"card-body\">\r\n    <button\r\n      mdbBtn\r\n      color=\"primary\"\r\n      class=\"btn btn-light\"\r\n      type=\"button\"\r\n      (click)=\"test.toggle()\"\r\n      mdbWavesEffect\r\n    >\r\n      Mehr dazu\r\n      <i class=\"fas fa-caret-down\"></i>\r\n    </button>\r\n    <div class=\"\" mdbCollapse #test>\r\n      <pre lang=\"de\">\r\n        <ng-katex-paragraph paragraph={{card.content}}></ng-katex-paragraph>\r\n      </pre>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-cards-overview',\n  templateUrl: './cards-overview.component.html',\n  styleUrls: ['./cards-overview.component.css']\n})\nexport class CardsOverviewComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"list-group\">\n  <a class=\"list-group-item list-group-item-action\">\n    <div class=\"d-flex w-100 justify-content-between\">\n      <h5 class=\"mb-1\">Karte 1</h5>\n      <small>Datum</small>\n    </div>\n    <p class=\"mb-1\">\n      Inhalt der Karte, auf eine bestimmte Länge gekürzt. Später soll es möglich\n      sein durch klicken sofort auf die Karte zu gelangen\n    </p>\n  </a>\n  <a class=\"list-group-item list-group-item-action\">\n    <div class=\"d-flex w-100 justify-content-between\">\n      <h5 class=\"mb-1\">Karte 2</h5>\n      <small>Datum</small>\n    </div>\n    <p class=\"mb-1\">\n      Inhalt der Karte, auf eine bestimmte Länge gekürzt. Später soll es möglich\n      sein durch klicken sofort auf die Karte zu gelangen\n    </p>\n  </a>\n  <a class=\"list-group-item list-group-item-action\">\n    <div class=\"d-flex w-100 justify-content-between\">\n      <h5 class=\"mb-1\">Karte 3</h5>\n      <small class=\"text-muted\">Datum</small>\n    </div>\n    <p class=\"mb-1\">\n      Inhalt der Karte, auf eine bestimmte Länge gekürzt. Später soll es möglich\n      sein durch klicken sofort auf die Karte zu gelangen\n    </p>\n  </a>\n</div>\n","import { Component, OnInit, HostListener, ViewChild } from \"@angular/core\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { StatesService } from \"../../services/states.service\";\r\nimport { CardsService } from \"../../services/cards.service\";\r\nimport { Card } from \"../../models/Card\";\r\nimport { Vorlesung } from \"src/app/models/Vorlesung\";\r\nimport { User } from \"src/app/models/User\";\r\n\r\n@Component({\r\n  selector: \"app-carousel\",\r\n  templateUrl: \"./carousel.component.html\",\r\n  styleUrls: [\"./carousel.component.css\"],\r\n})\r\nexport class CarouselComponent implements OnInit {\r\n  lecture: Vorlesung;\r\n\r\n  @ViewChild(\"mycarousel\", { static: false }) public carousel: any;\r\n  @HostListener(\"swipeleft\", [\"$event\"]) public swipePrev(event: any) {\r\n    this.carousel.previousSlide();\r\n  }\r\n  @HostListener(\"swiperight\", [\"$event\"]) public swipeNext(event: any) {\r\n    this.carousel.nextSlide();\r\n  }\r\n  cards: Card[]; //array of all the cards\r\n  activeSlide: number = 0;\r\n  title: string;\r\n  addComponentHidden: boolean;\r\n  formShow: boolean;\r\n  formMode: string;\r\n  private user: User;\r\n\r\n  constructor(\r\n    private httpService: HttpService,\r\n    private stateService: StatesService,\r\n    private cardsService: CardsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.httpService.getUser().subscribe((user) => (this.user = user));\r\n    this.httpService.getCurrentLecture().subscribe((lecture) => {\r\n      this.lecture = lecture;\r\n      this.title = this.lecture.name;\r\n    });\r\n\r\n    this.cardsService.getCards().subscribe((cards) => {\r\n      this.cards = cards;\r\n    }); //load the specific cards from the server by subscribing to the observable that the card-service provides\r\n    this.stateService.setFormMode(\"none\");\r\n    this.stateService.getFormMode().subscribe((mode) => {\r\n      this.formShow = mode == \"add\";\r\n      this.formMode = mode;\r\n    });\r\n\r\n    this.cardsService.getNewCardIndex().subscribe((index) => {\r\n      if (this.carousel && this.activeSlide != index) {\r\n        this.activeSlide = index;\r\n        this.carousel.selectSlide(index);\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleAddView(): void {\r\n    if (this.formMode != \"edit\") {\r\n      if (this.formMode == \"add\") {\r\n        this.stateService.setFormMode(\"none\");\r\n      } else {\r\n        this.stateService.setFormMode(\"add\");\r\n      }\r\n    }\r\n  }\r\n  enableEdit() {\r\n    this.stateService.setFormMode(\"edit\");\r\n  }\r\n\r\n  setClass() {\r\n    return !this.formShow ? \"btn btn-light\" : \"btn btn-info\";\r\n  }\r\n\r\n  selectSlide(n: number) {\r\n    this.carousel.selectSlide(n.toString());\r\n  }\r\n  showRandomCard() {\r\n    var rand: number = this.activeSlide;\r\n    var count = 0;\r\n    while (count < 5 && rand == this.activeSlide) {\r\n      //calculate a new random index\r\n      count++;\r\n      rand = Math.floor(Math.random() * this.cards.length); //random Cardindex\r\n    }\r\n    this.carousel.selectSlide(rand.toString());\r\n  }\r\n  goToPrev() {\r\n    if (this.formMode != \"edit\") {\r\n      this.carousel.previousSlide();\r\n    }\r\n  }\r\n  goToNext() {\r\n    if (this.formMode != \"edit\") {\r\n      this.carousel.nextSlide();\r\n    }\r\n  }\r\n  onSlide(slideEvent) {\r\n    this.activeSlide = parseInt(slideEvent.relatedTarget);\r\n    this.cardsService.setActiveCardIndex(parseInt(slideEvent.relatedTarget));\r\n  }\r\n  isDisabled() {\r\n    if (this.formMode == \"edit\" || !this.cards || this.cards.length == 0) {\r\n      return true;\r\n    } else {\r\n      let currCard = this.cards[this.activeSlide]; //get the card that is currently showing\r\n\r\n      if (!currCard.author || currCard.author.length == 0) {\r\n        return false;\r\n      }\r\n      if (!this.user || currCard.author !== this.user.username) {\r\n        //there is an author an it is not the user\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n}\r\n","<h3 id=\"vorlesung\">{{ title }}</h3>\r\n<div class=\"btn-group\" id=\"btnDiv\" role=\"group\">\r\n  <button\r\n    class=\"btn btn-light\"\r\n    id=\"rand\"\r\n    placement=\"top\"\r\n    ngbTooltip=\"Zufall\"\r\n    (click)=\"showRandomCard()\"\r\n    [disabled]=\"formMode == 'edit' || !cards || cards.length == 0\"\r\n  >\r\n    <div class=\"fas fa-random\"></div>\r\n  </button>\r\n  <button\r\n    class=\"btn btn-light\"\r\n    id=\"editCard\"\r\n    type=\"button\"\r\n    placement=\"top\"\r\n    [disabled]=\"isDisabled()\"\r\n    (click)=\"enableEdit()\"\r\n    ngbTooltip=\"Bearbeiten\"\r\n  >\r\n    <div class=\"fas fa-pen\"></div>\r\n  </button>\r\n\r\n  <button\r\n    [ngClass]=\"setClass()\"\r\n    id=\"toggleAdd\"\r\n    type=\"button\"\r\n    data-toggle=\"button\"\r\n    (click)=\"toggleAddView()\"\r\n    placement=\"top\"\r\n    [ngbTooltip]=\"formMode == 'add' ? 'Verstecken' : 'Hinzufügen'\"\r\n    [disabled]=\"formMode == 'edit'\"\r\n  >\r\n    <div [class]=\"formMode == 'add' ? 'fas fa-minus' : 'fas fa-plus'\"></div>\r\n  </button>\r\n</div>\r\n<div *ngIf=\"cards && cards.length > 0\" class=\"row\">\r\n  <a (click)=\"goToPrev()\">\r\n    <span class=\"fas fa-chevron-left\"></span>\r\n  </a>\r\n  <div id=\"carousel\" (swipeleft)=\"goToPrev()\" (swiperight)=\"goToNext()\">\r\n    <mdb-carousel\r\n      (activeSlideChange)=\"onSlide($event)\"\r\n      #mycarousel\r\n      [(activeSlideIndex)]=\"activeSlide\"\r\n      [animation]=\"'slide'\"\r\n      [isControls]=\"false\"\r\n      [allowSwipe]=\"true\"\r\n      [interval]=\"'0'\"\r\n      ><ng-container *ngFor=\"let card of cards; index as i\">\r\n        <mdb-carousel-item [id]=\"i.toString()\">\r\n          <app-card [card]=\"card\"></app-card>\r\n        </mdb-carousel-item>\r\n      </ng-container>\r\n    </mdb-carousel>\r\n  </div>\r\n  <a (click)=\"goToNext()\">\r\n    <span class=\"fas fa-chevron-right\"></span>\r\n  </a>\r\n</div>\r\n","import { Component, OnInit } from \"@angular/core\";\nimport { HttpService } from \"../../services/http.service\";\nimport { NgForm } from \"@angular/forms\";\n@Component({\n  selector: \"app-change-profile\",\n  templateUrl: \"./change-profile.component.html\",\n  styleUrls: [\"./change-profile.component.css\"],\n})\nexport class ChangeProfileComponent implements OnInit {\n  public userInfo;\n  constructor(private http: HttpService) {}\n\n  ngOnInit(): void {\n    this.http.getUserInfo().subscribe((info) => (this.userInfo = info));\n  }\n\n  changeAccount(form: NgForm) {\n    console.log(form.value);\n  }\n  changePassword(form: NgForm) {\n    console.log(form.value);\n  }\n  setStyle(password, password2) {\n    if (\n      password2.value &&\n      password2.value.length > 5 &&\n      password2.value != password.value\n    ) {\n      return \"box-shadow:0 0 3px #CC0000;\";\n    }\n    return \"\";\n  }\n  match(s1: string, s2: string) {\n    return s1 && s1.length > 7 && s1 === s2;\n  }\n  validate(form: NgForm) {\n    if (\n      this.checkEmail(form.value.email) &&\n      form.value.username &&\n      form.value.username.length >= 5\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  checkEmail(email) {\n    if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\n      return true;\n    }\n\n    return false;\n  }\n}\n","<h2>Accountdaten ändern</h2>\n<form #form=\"ngForm\" (ngSubmit)=\"changeAccount(form)\" novalidate>\n  <div class=\"form-group\">\n    <label for=\"username\">Benutzername</label>\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      id=\"username\"\n      name=\"username\"\n      required\n      maxlength=\"20\"\n      aria-describedby=\"nameHelp\"\n      #username=\"ngModel\"\n      [(ngModel)]=\"userInfo.username\"\n    />\n    <small class=\"form-text\">Wenigstens 5 Zeichen </small>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"email\">Email Adresse</label>\n    <input\n      type=\"email\"\n      class=\"form-control\"\n      name=\"email\"\n      id=\"email\"\n      aria-describedby=\"emailHelp\"\n      required\n      #email=\"ngModel\"\n      [(ngModel)]=\"userInfo.email\"\n    />\n  </div>\n  <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!validate(form)\">\n    Sichern\n  </button>\n</form>\n<hr />\n<h2>Passwort ändern</h2>\n<form #pwform=\"ngForm\" (ngSubmit)=\"changePassword(pwform)\" novalidate>\n  <div class=\"form-group\">\n    <label for=\"password\">Neues Passwort</label>\n    <input\n      type=\"password\"\n      class=\"form-control\"\n      name=\"password\"\n      id=\"password\"\n      #password=\"ngModel\"\n      ngModel\n      minlength=\"7\"\n    />\n    <small class=\"form-text\">Wenigstens 7 Zeichen </small>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"password2\">Neues Passwort wiederholen</label>\n    <input\n      type=\"password\"\n      class=\"form-control\"\n      name=\"password2\"\n      id=\"password2\"\n      #password2=\"ngModel\"\n      ngModel\n      minlength=\"7\"\n      [style]=\"setStyle(password, password2)\"\n    />\n  </div>\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary\"\n    [disabled]=\"!match(password.value, password2.value)\"\n  >\n    Ändern\n  </button>\n</form>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<footer class=\"footer\">\n  <ul class=\"list-group list-group-horizontal\">\n    <li class=\"list-group-item\">\n      <a routerLink=\"/about\"> About </a>\n    </li>\n    <li class=\"list-group-item\">\n      <a routerLink=\"/about\" fragment=\"FAQ\"> FAQ </a>\n    </li>\n    <li class=\"list-group-item\">\n      <a href=\"https://git.rwth-aachen.de/jungerjunge2/cards\" target=\"_blank\"\n        >GitLab</a\n      >\n    </li>\n    <li class=\"list-group-item\">\n      <a\n        href=\"https://git.rwth-aachen.de/jungerjunge2/cards/-/releases\"\n        target=\"_blank\"\n        >Releases</a\n      >\n    </li>\n  </ul>\n</footer>\n","import { Component, OnInit, Output, EventEmitter, Input } from \"@angular/core\";\r\nimport { Vorlesung } from \"../../models/Vorlesung\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { Card } from \"../../models/Card\";\r\n@Component({\r\n  selector: \"app-lectures\",\r\n  templateUrl: \"./lectures.component.html\",\r\n  styleUrls: [\"./lectures.component.css\"],\r\n})\r\nexport class LecturesComponent implements OnInit {\r\n  lectures: Vorlesung[];\r\n\r\n  @Input() newVl: Vorlesung;\r\n\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.httpService.getAllLectures().subscribe((lectures) => {\r\n      this.lectures = lectures;\r\n    });\r\n  }\r\n\r\n  ngOnChanges() {\r\n    if (this.newVl) {\r\n      console.log(\"got new vl: \", this.newVl);\r\n      this.lectures.push(this.newVl);\r\n    }\r\n  }\r\n  setLink(lecture: Vorlesung) {\r\n    return \"/vorlesung/\" + lecture.abrv;\r\n  }\r\n}\r\n","<ul class=\"list list-group\">\r\n  <li class=\"list-group-item\" *ngFor=\"let lecture of lectures\">\r\n    <a [routerLink]=\"setLink(lecture)\">{{ lecture.name }}</a>\r\n  </li>\r\n</ul>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { Router } from \"@angular/router\";\r\n@Component({\r\n  selector: \"app-login-form\",\r\n  templateUrl: \"./login-form.component.html\",\r\n  styleUrls: [\"./login-form.component.css\"],\r\n})\r\nexport class LoginFormComponent implements OnInit {\r\n  constructor(private http: HttpService, private router: Router) {}\r\n  public errors;\r\n\r\n  ngOnInit(): void {}\r\n  submit(form: NgForm) {\r\n    this.http.login(form.value).subscribe((response) => {\r\n      if (response.status == 200) {\r\n        this.router.navigate([\"/\"]);\r\n      }\r\n    });\r\n  }\r\n\r\n  isDisabled(username, password) {\r\n    if (!(username.value && password.value)) {\r\n      return true;\r\n    }\r\n    return username.value.length < 5 || password.value.length < 7;\r\n  }\r\n}\r\n","<div class=\"alert alert-warning\" *ngFor=\"let error of errors\">\r\n  {{ error }}\r\n</div>\r\n<div class=\"container\">\r\n  <form #form=\"ngForm\" (ngSubmit)=\"submit(form)\" novalidate>\r\n    <div class=\"form-group\">\r\n      <label for=\"name\">Benutzername</label>\r\n      <input\r\n        type=\"text\"\r\n        class=\"form-control\"\r\n        id=\"name\"\r\n        name=\"username\"\r\n        required\r\n        aria-describedby=\"nameHelp\"\r\n        #username=\"ngModel\"\r\n        ngModel\r\n      />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"password\">Passwort</label>\r\n      <input\r\n        type=\"password\"\r\n        class=\"form-control\"\r\n        name=\"password\"\r\n        id=\"password\"\r\n        #password=\"ngModel\"\r\n        ngModel\r\n      />\r\n    </div>\r\n    <div class=\"form-group form-check\">\r\n      <input\r\n        required\r\n        type=\"checkbox\"\r\n        class=\"form-check-input\"\r\n        id=\"remember\"\r\n        name=\"remember\"\r\n        #remember=\"ngModel\"\r\n        [checked]=\"true\"\r\n        ngModel\r\n      />\r\n      <label class=\"form-check-label\" for=\"remember\">Eingeloggt bleiben</label>\r\n    </div>\r\n    <button\r\n      type=\"submit\"\r\n      class=\"btn btn-primary btn-lg btn-block\"\r\n      [disabled]=\"isDisabled(username, password)\"\r\n    >\r\n      Login\r\n    </button>\r\n  </form>\r\n</div>\r\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { Card } from \"../../models/Card\";\r\nimport { Router } from \"@angular/router\";\r\nimport { Title } from \"@angular/platform-browser\";\r\nimport { User } from \"src/app/models/User\";\r\nimport { HttpService } from \"src/app/services/http.service\";\r\nimport { CardsService } from \"src/app/services/cards.service\";\r\nimport { Vorlesung } from \"src/app/models/Vorlesung\";\r\nimport { StatesService } from \"src/app/services/states.service\";\r\n@Component({\r\n  selector: \"app-nav-bar\",\r\n  templateUrl: \"./nav-bar.component.html\",\r\n  styleUrls: [\"./nav-bar.component.css\"],\r\n})\r\nexport class NavBarComponent implements OnInit {\r\n  public user: User;\r\n  public cards: Card[];\r\n  public errors: string[];\r\n\r\n  public loading: boolean = false;\r\n  public constructor(\r\n    private router: Router,\r\n    private titleService: Title,\r\n    private http: HttpService,\r\n    private cardsService: CardsService,\r\n    private statesService: StatesService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.setPageTitle();\r\n    this.http.getUser().subscribe((user) => (this.user = user));\r\n    this.statesService.getLoadingState().subscribe((val) => {\r\n      this.loading = val;\r\n    });\r\n    this.router.events.subscribe((e) => {\r\n      //clear error messages on route change\r\n      this.http.clearErrors();\r\n    });\r\n    this.http.getErrors().subscribe((errors) => (this.errors = errors));\r\n    if (this.router.url.match(/vorlesung/)) {\r\n      this.cardsService.getCards().subscribe((cards) => {\r\n        this.cards = cards;\r\n      });\r\n    }\r\n  }\r\n  closeAlert(i: number) {\r\n    this.http.removeError(i);\r\n  }\r\n  isActive(path: string): string {\r\n    return path === this.router.url ? \"active\" : \"\";\r\n  }\r\n  setPageTitle(): void {\r\n    let currentTitle: string;\r\n    switch (this.router.url) {\r\n      case \"/login\":\r\n        currentTitle = \"Login\";\r\n        break;\r\n      case \"/signup\":\r\n        currentTitle = \"Sign Up\";\r\n        break;\r\n      case \"/\":\r\n        currentTitle = \"Home\";\r\n        break;\r\n      default:\r\n        currentTitle = \"Cards\";\r\n    }\r\n    this.titleService.setTitle(currentTitle);\r\n  }\r\n  logout() {\r\n    this.http.logout();\r\n    this.user = null;\r\n    this.router.navigate([\"/\"]);\r\n  }\r\n}\r\n","<nav\r\n  class=\"navbar navbar-expand-lg navbar-light bg-light\"\r\n  role=\"alert\"\r\n  style=\"padding-right: 0;\"\r\n>\r\n  <div class=\"row\">\r\n    <div class=\"col-8\">\r\n      <button\r\n        class=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarNav\"\r\n        aria-controls=\"navbarNav\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span class=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n        <ul class=\"navbar-nav\" id=\"navlist\">\r\n          <li class=\"{{ isActive('/') }} nav-item\">\r\n            <a class=\"nav-link\" routerLink=\"/\" tabindex=\"1\"\r\n              ><i class=\"fas fa-home\"></i> Vorlesungen</a\r\n            >\r\n          </li>\r\n\r\n          <li *ngIf=\"!user\" class=\"{{ isActive('/login') }} nav-item\">\r\n            <a class=\"nav-link\" routerLink=\"/login\"\r\n              ><i class=\"fas fa-user\"></i> Login</a\r\n            >\r\n          </li>\r\n          <li *ngIf=\"!user\" class=\"{{ isActive('/signup') }} nav-item\">\r\n            <a class=\"nav-link\" routerLink=\"/signup\"\r\n              ><i class=\"fas fa-plus\"></i> Registrieren</a\r\n            >\r\n          </li>\r\n          <li *ngIf=\"user\" class=\"{{ isActive('/profile') }} nav-item\">\r\n            <div class=\"dropdown\">\r\n              <a\r\n                class=\"nav-link\"\r\n                type=\"button\"\r\n                id=\"dropdownMenuButton\"\r\n                data-toggle=\"dropdown\"\r\n                aria-haspopup=\"true\"\r\n                aria-expanded=\"false\"\r\n              >\r\n                <i class=\"fas fa-user-circle\"></i> Account\r\n              </a>\r\n              <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                <a\r\n                  class=\"dropdown-item\"\r\n                  routerLink=\"/account\"\r\n                  placement=\"bottom\"\r\n                  >Account management</a\r\n                >\r\n                <a class=\"dropdown-item\" (click)=\"logout()\">\r\n                  Logout\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"cards\" class=\"col-4\" style=\"padding-right: 0;\">\r\n      <app-search-bar></app-search-bar>\r\n    </div>\r\n  </div>\r\n</nav>\r\n<div id=\"progress\">\r\n  <mat-progress-bar *ngIf=\"loading\" mode=\"indeterminate\"></mat-progress-bar>\r\n</div>\r\n\r\n<div\r\n  #alert\r\n  class=\"alert alert-warning alert-dismissible fade show\"\r\n  role=\"alert\"\r\n  *ngFor=\"let error of errors; index as i\"\r\n>\r\n  <button\r\n    type=\"button\"\r\n    class=\"close\"\r\n    aria-label=\"Close\"\r\n    (click)=\"closeAlert(i)\"\r\n  >\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  {{ error }}\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-notifications',\n  templateUrl: './notifications.component.html',\n  styleUrls: ['./notifications.component.css']\n})\nexport class NotificationsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>\n  Hier werden später Benachrichtigungen über Bearbeitungsvorschläge und\n  Kommentare stehen\n</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-overview',\n  templateUrl: './overview.component.html',\n  styleUrls: ['./overview.component.css']\n})\nexport class OverviewComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"card\">\n  <div class=\"card-header\">\n    Here username and profile pic\n  </div>\n  <div class=\"card-body\">\n    <p class=\"card-text\">\n      info linke full name, email, account regestry date, number of cards\n      added,...\n    </p>\n  </div>\n</div>\n","import { Component, OnInit, Input } from \"@angular/core\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { CardsService } from \"../../services/cards.service\";\r\nimport { StatesService } from \"../../services/states.service\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { Card } from \"../../models/Card\";\r\nimport { SearchSuggestion } from \"../../models/SearchSuggestion\";\r\nimport { Vorlesung } from \"src/app/models/Vorlesung\";\r\n\r\n@Component({\r\n  selector: \"app-search-bar\",\r\n  templateUrl: \"./search-bar.component.html\",\r\n  styleUrls: [\"./search-bar.component.css\"],\r\n})\r\nexport class SearchBarComponent implements OnInit {\r\n  constructor(\r\n    private cardsService: CardsService,\r\n    private stateService: StatesService\r\n  ) {}\r\n  cards: Card[];\r\n  suggestions: SearchSuggestion[];\r\n  uInput: string;\r\n  clearSuggestions: boolean;\r\n\r\n  ngOnInit(): void {\r\n    this.stateService.getHideSuggestions().subscribe((value) => {\r\n      this.clearSuggestions = value;\r\n      if (value) {\r\n        this.suggestions = [];\r\n      }\r\n    });\r\n    this.cardsService.getCards().subscribe((cards) => {\r\n      this.cards = cards;\r\n      cards.forEach((card) => {\r\n        if (card.thema == null) {\r\n          card.thema = \"\";\r\n        }\r\n        if (card.content == null) {\r\n          card.content = \"\";\r\n        }\r\n      });\r\n    });\r\n  }\r\n  inField() {\r\n    this.stateService.setTyping(true);\r\n  }\r\n  resetNav() {\r\n    this.stateService.setTyping(false);\r\n  }\r\n  findMatches(e: Event) {\r\n    this.stateService.setHideSuggestions(false); //show suggestions\r\n    if (this.uInput && this.uInput.length > 2) {\r\n      this.suggestions = [];\r\n      const regex = new RegExp(`${this.uInput}`, \"gi\");\r\n\r\n      for (let i = 0; i < this.cards.length; i++) {\r\n        if (this.cards[i].thema.match(regex)) {\r\n          this.suggestions.push({ title: this.cards[i].thema, index: i });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  navigateTo(e: Event, index: number) {\r\n    e.preventDefault();\r\n    this.uInput = \"\";\r\n    this.cardsService.setNewCardIndex(index);\r\n  }\r\n}\r\n","<input\r\n  [(ngModel)]=\"uInput\"\r\n  (input)=\"findMatches($event)\"\r\n  class=\"form-control float-right\"\r\n  id=\"search\"\r\n  type=\"search\"\r\n  placeholder=\"Frage suchen\"\r\n  (focus)=\"inField()\"\r\n  (blur)=\"resetNav()\"\r\n/>\r\n<div *ngIf=\"suggestions\" id=\"matches\">\r\n  <ul class=\"list-group\">\r\n    <li *ngFor=\"let suggestion of suggestions\" class=\"list-group-item\">\r\n      <a href=\"#\" (click)=\"navigateTo($event, suggestion.index)\">{{\r\n        suggestion.title\r\n      }}</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { Router } from \"@angular/router\";\r\n@Component({\r\n  selector: \"app-signup-form\",\r\n  templateUrl: \"./signup-form.component.html\",\r\n  styleUrls: [\"./signup-form.component.css\"],\r\n})\r\nexport class SignupFormComponent implements OnInit {\r\n  constructor(private http: HttpService, private router: Router) {}\r\n  errors;\r\n\r\n  ngOnInit(): void {}\r\n  submit(form: NgForm) {\r\n    this.http.createAccount(form.value).subscribe(\r\n      (response) => {\r\n        if (response) {\r\n              this.router.navigate([\"/\"]);\r\n        }\r\n      },\r\n      (error) => {\r\n        if ((error.headers.status = 422)) {\r\n          console.log(error);\r\n          this.errors = error.error.errors;\r\n        }\r\n      }\r\n    );\r\n  }\r\n  setStyle(password, password2) {\r\n    if (\r\n      password2.value &&\r\n      password2.value.length > 5 &&\r\n      password2.value != password.value\r\n    ) {\r\n      return \"box-shadow:0 0 3px #CC0000;\";\r\n    }\r\n    return \"\";\r\n  }\r\n  checkEmail(email) {\r\n    if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n  getLength(elem) {\r\n    if (elem.value) {\r\n      return elem.value.length;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n  setCharIndicatorStyle(field, max: number) {\r\n    if (field.value) {\r\n      return {\r\n        color: field.value.length > max ? \"#ff0000\" : \"#000000\",\r\n      };\r\n    } else {\r\n      return { color: \"#000000\" };\r\n    }\r\n  }\r\n  isDisabled(username, email, password, password2) {\r\n    if (!(username.value && email.value && password.value)) {\r\n      return true;\r\n    }\r\n    return (\r\n      username.value.length < 5 ||\r\n      password.value.length < 7 ||\r\n      password.value != password2.value ||\r\n      !this.checkEmail(email.value)\r\n    );\r\n  }\r\n}\r\n","<div class=\"alert alert-warning\" *ngFor=\"let error of errors\">\r\n  {{ error }}\r\n</div>\r\n<div class=\"container\">\r\n  <form #form=\"ngForm\" (ngSubmit)=\"submit(form)\" novalidate>\r\n    <div class=\"form-group\">\r\n      <label for=\"name\">Benutzername</label>\r\n      <input\r\n        type=\"text\"\r\n        class=\"form-control\"\r\n        id=\"username\"\r\n        name=\"username\"\r\n        required\r\n        maxlength=\"20\"\r\n        aria-describedby=\"nameHelp\"\r\n        #username=\"ngModel\"\r\n        ngModel\r\n      />\r\n      <small class=\"form-text\">Wenigstens 5 Zeichen </small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"email\">Email Adresse</label>\r\n      <input\r\n        type=\"email\"\r\n        class=\"form-control\"\r\n        name=\"email\"\r\n        id=\"email\"\r\n        aria-describedby=\"emailHelp\"\r\n        required\r\n        #email=\"ngModel\"\r\n        ngModel\r\n      />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"password\">Passwort</label>\r\n      <input\r\n        type=\"password\"\r\n        class=\"form-control\"\r\n        name=\"password\"\r\n        id=\"password\"\r\n        #password=\"ngModel\"\r\n        ngModel\r\n        minlength=\"7\"\r\n      />\r\n      <small class=\"form-text\">Wenigstens 7 Zeichen </small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"password\">Passwort wiederholen</label>\r\n      <input\r\n        type=\"password\"\r\n        class=\"form-control\"\r\n        name=\"password2\"\r\n        id=\"password2\"\r\n        #password2=\"ngModel\"\r\n        ngModel\r\n        minlength=\"7\"\r\n        [style]=\"setStyle(password, password2)\"\r\n      />\r\n      <small class=\"form-text\"> </small>\r\n    </div>\r\n    <button\r\n      type=\"submit\"\r\n      class=\"btn btn-primary btn-lg btn-block\"\r\n      [disabled]=\"isDisabled(username, email, password, password2)\"\r\n    >\r\n      Account erstellen\r\n    </button>\r\n  </form>\r\n</div>\r\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { StatesService } from \"../../services/states.service\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { CardsService } from \"../../services/cards.service\";\r\nimport { Card } from \"../../models/Card\";\r\nimport { Vorlesung } from \"../../models/Vorlesung\";\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\n\r\n@Component({\r\n  selector: \"app-update-card-form\",\r\n  templateUrl: \"./update-card-form.component.html\",\r\n  styleUrls: [\"./update-card-form.component.css\"],\r\n})\r\nexport class UpdateCardFormComponent implements OnInit {\r\n  public cardCopy: Card;\r\n  private cards: Card[];\r\n  private cardIndex: number; //saves the cardindex which the user is currently updating\r\n  private activeCardIndex: number; //saves the active cardindex\r\n  constructor(\r\n    private cardsService: CardsService,\r\n    private statesService: StatesService,\r\n    public dialog: MatDialog\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.cardsService.getCards().subscribe((cards) => {\r\n      this.cards = cards;\r\n    });\r\n    this.cardsService.getActiveCardIndex().subscribe((index) => {\r\n      this.activeCardIndex = index;\r\n      if (this.cards) {\r\n        this.cardCopy = { ...this.cards[this.activeCardIndex] };\r\n      }\r\n      this.cardIndex = this.activeCardIndex;\r\n    });\r\n  }\r\n  inField() {\r\n    this.statesService.setTyping(true);\r\n  }\r\n  resetNav() {\r\n    this.statesService.setTyping(false);\r\n  }\r\n  onSubmit(f: NgForm) {\r\n    this.cardCopy.content = f.value.content;\r\n    this.cardCopy.thema = f.value.thema;\r\n    this.cardsService\r\n      .updateCard({ ...this.cardCopy }, this.cardIndex)\r\n      .subscribe((resp) => {\r\n        f.reset();\r\n      });\r\n  }\r\n  cancelEdit() {\r\n    const dialogRef = this.dialog.open(DialogOverviewExampleDialog, {\r\n      width: \"400px\",\r\n    });\r\n  }\r\n\r\n  //Function to set style of small character indicator\r\n  setThemaCharIndicatorStyle(thema) {\r\n    if (thema.value) {\r\n      return {\r\n        color:\r\n          (thema.value && thema.value.length > 0 && thema.value.length < 3) ||\r\n          thema.value.length > 60\r\n            ? \"#ff0000\"\r\n            : \"#000000\",\r\n      };\r\n    } else {\r\n      return { color: \"#000000\" };\r\n    }\r\n  }\r\n  //Function to set style of small character indicator\r\n  setContentCharIndicatorStyle(content) {\r\n    if (content.value) {\r\n      return {\r\n        color:\r\n          content.value && content.value.length > 400 ? \"#ff0000\" : \"#000000\",\r\n      };\r\n    } else {\r\n      return { color: \"#000000\" };\r\n    }\r\n  }\r\n\r\n  getLength(elem) {\r\n    if (elem.value) {\r\n      return elem.value.length;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  isDisabled(content, thema) {\r\n    if (!content.value || !thema.value) {\r\n      return true;\r\n    }\r\n    return (\r\n      content.value.length > 400 ||\r\n      (thema.value.length > 0 && thema.value.length < 3) ||\r\n      thema.value.length > 60\r\n    );\r\n  }\r\n}\r\n@Component({\r\n  selector: \"dialog-overview-example-dialog\",\r\n  templateUrl: \"dialog.html\",\r\n})\r\nexport class DialogOverviewExampleDialog {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DialogOverviewExampleDialog>,\r\n    private service: StatesService\r\n  ) {}\r\n\r\n  cancel() {\r\n    this.service.setFormMode(\"reset\");\r\n    this.service.setLoadingState(false);\r\n    this.dialogRef.close();\r\n  }\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","<div id=\"addCard\">\r\n  <form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\" novalidate>\r\n    <h4>Karteikarte bearbeiten</h4>\r\n    <div class=\"form-group\">\r\n      <label for=\"thema\">Überschrift</label>\r\n      <input\r\n        class=\"form-control\"\r\n        id=\"thema\"\r\n        name=\"thema\"\r\n        type=\"text\"\r\n        placeholder=\"Thema\"\r\n        minlength=\"3\"\r\n        required\r\n        #thema=\"ngModel\"\r\n        [(ngModel)]=\"cardCopy.thema\"\r\n        (focus)=\"inField()\"\r\n        (blur)=\"resetNav()\"\r\n      />\r\n      <small\r\n        class=\"form-text float-right\"\r\n        [ngStyle]=\"setThemaCharIndicatorStyle(thema)\"\r\n        >{{ getLength(thema) }}/60\r\n      </small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"content\">Informationen</label>\r\n      <textarea\r\n        class=\"form-control\"\r\n        id=\"content\"\r\n        name=\"content\"\r\n        rows=\"5\"\r\n        required\r\n        #content=\"ngModel\"\r\n        [(ngModel)]=\"cardCopy.content\"\r\n        (focus)=\"inField()\"\r\n        (blur)=\"resetNav()\"\r\n      ></textarea>\r\n      <small\r\n        class=\"form-text float-right\"\r\n        [ngStyle]=\"setContentCharIndicatorStyle(content)\"\r\n        >{{ getLength(content) }}/400\r\n      </small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <input\r\n        class=\"btn btn-success mb-2 mr-1\"\r\n        type=\"submit\"\r\n        value=\"Sichern\"\r\n        [disabled]=\"isDisabled(content, thema)\"\r\n      />\r\n      <input\r\n        class=\"btn btn-danger mb-2\"\r\n        type=\"button\"\r\n        value=\"Abbruch\"\r\n        (click)=\"cancelEdit()\"\r\n      />\r\n    </div>\r\n  </form>\r\n</div>\r\n","<h1 mat-dialog-title>Abbruch</h1>\r\n<div mat-dialog-content>\r\n  <p>Bist du sicher, dass du das Bearbeiten dieser Karte abbrechen möchtest?</p>\r\n</div>\r\n<hr />\r\n<div mat-dialog-actions style=\"text-align: right;\">\r\n  <button class=\"btn btn-secondary mr-2\" mat-button (click)=\"onNoClick()\">\r\n    Nein,zurück\r\n  </button>\r\n  <button class=\"btn btn-danger\" mat-button (click)=\"cancel()\">Ja</button>\r\n</div>\r\n","export class Card {\r\n  _id?: string;\r\n  thema: string;\r\n  author?: string;\r\n  content: string;\r\n  abrv: string;\r\n  constructor(thema, content, abrv) {\r\n    this.thema = thema;\r\n    this.content = content;\r\n    this.abrv = abrv;\r\n  }\r\n}\r\n","export class Vorlesung {\r\n  name: string;\r\n  abrv: string;\r\n  constructor(name, abrv) {\r\n    this.name = name;\r\n    this.abrv = abrv;\r\n  }\r\n}\r\n","import { Component, OnInit } from \"@angular/core\";\nimport { HttpService } from \"../../services/http.service\";\nimport { from } from \"rxjs\";\n\n@Component({\n  selector: \"app-about\",\n  templateUrl: \"./about.component.html\",\n  styleUrls: [\"./about.component.css\"],\n})\nexport class AboutComponent implements OnInit {\n  public loggedIn: boolean;\n  constructor(private http: HttpService) {}\n\n  ngOnInit(): void {\n    this.http.getUser().subscribe((user) => {\n      if (user) {\n        this.loggedIn = true;\n      } else {\n        this.loggedIn = false;\n      }\n    });\n  }\n}\n","<app-nav-bar></app-nav-bar>\n<div class=\"container\">\n  <div class=\"media\">\n    <img src=\"assets/c.png\" class=\"align-self-center mr-1\" alt=\"Logo\" />\n    <div class=\"media-body\">\n      <h3>Cards</h3>\n    </div>\n  </div>\n  <p>\n    Cards ist eine Webseite, die dir dabei helfen soll dich auf deine Klausuren\n    und Prüfungen vorzubereiten. Das Konzept von Cards beruht auf den\n    klassischen Karteikarten. Anders als die klassischen Karteikarten brauchst\n    du jedoch nicht deinen Stapel an Karten überall mitzuschleppen. Unsere\n    Webseite eignet sich vor allem auch für Smartphones, somit kannst du dir\n    deine Karteikarten auch unterwegs anschauen. Sie richtet sich vor allem an\n    Studenten.\n  </p>\n  <p *ngIf=\"!loggedIn\">\n    <a routerLink=\"/signup\">Erstelle einen Account</a>, um alle Vorteile unserer\n    Webseite zu nutzen.\n  </p>\n  <h4>Sharing is Caring</h4>\n  <p>\n    Karteikarten, die du auf unserer Webseite hinzufügst, sind automatisch für\n    alle anderen Nutzer sichtbar. Andererseits kannst du dir auch Karten von\n    anderen Nutzern anschauen.Dies sorgt dafür, dass du optimal auf deine\n    Klausur vorbereitet bist. <br />\n    Wenn du mit einer Karte nicht zufrieden bist, oder du glaubst ihr Inhalt\n    wäre falsch oder unvollständig, kannst du sie bearbeiten. Karten, welche von\n    registrierten Nutzern erstellt worden sind, kannst du leider nicht\n    bearbeiten. In einer späteren Version wird es möglich sein für diese Karte\n    einen Verberungsvorschlag an den Ertseller der Karte zu senden.\n  </p>\n  <h4>Wir freuen uns über Feedback</h4>\n  <p>\n    Wir bemühen uns, die Seite fehlerfrei zu gestalten. Trotzdem kann es sein,\n    dass sich der ein oder andere Fehler eingeschlichen hat. Diesen kannst du\n    uns gerne melden indem du\n    <a\n      href=\"https://git.rwth-aachen.de/jungerjunge2/cards/-/issues\"\n      target=\"_blank\"\n      >hier</a\n    >\n    ein Issue erstellst. Wir versuchen den Fehler, dann so schnell wie möglich\n    zu beheben. Du kannst uns dort auch gerne Feedback hinterlassen\n  </p>\n\n  <h3 id=\"FAQ\">FAQ</h3>\n  <h4>Wo finde ich die Karteikarten zu meiner Vorlesung?</h4>\n  <p>\n    Auf unserer <a routerLink=\"/\">Startseite</a> findest du eine Liste aller\n    Vorlesungen, für die bisher Karten hinzugefügt wurden. Wähle deine Vorlesung\n    aus. Falls du die Vorlesung nich in der Liste findest, dann kannst du sie\n    hinzufügen indem du das Formular ausfüllst und auf \"Hinzufügen\" drückst.\n    <br />\n    Nachdem du auf die Vorlesung gedrückt hast kommst du auf eine neue Seite,\n    auf der du dir alle Karteikarten, die zu der Vorlesung bereits hinzugefügt\n    wurden, anschauen. Nutze die Pfeiltasten oder wische horizontal über die\n    Karte, um dir weitere Karten anzuschauen. Du kannst den Inhalt der Karte\n    aufklappen indem du auf \"Mehr dazu\" drückst. <br />\n    Du kannst auch die Suchfunktion in der Navigationsleiste nutzen, um nach\n    bestimmten Karten zu suchen.\n  </p>\n  <h4>Wie erstelle ich eine Karte?</h4>\n  <p>\n    Auf unserer <a routerLink=\"/\">Startseite</a> siehst du eine Liste von\n    Vorlesungen. Wähle die Vorlesung aus zu der du eine Karteikarte hinzufügen\n    möchtest. Falls deine Vorlesung nicht findest, kannst du sie über das\n    Formular hinzufügen. <br />\n    Nachdem du auf die Seite der Vorlesung navigiert bist kannst du eine neue\n    Karte hinzufügen indem du auf das <i class=\"fas fa-plus\"></i> Symbol unter\n    der Überschrift drückst. Nun kannst du deine Karteikarte hinzufügen indem du\n    das Formular ausfüllst und auf \"Hinzufügen\" drückst.\n    <span *ngIf=\"!loggedIn\">\n      Erstelle am Besten einen\n      <a routerLink=\"/signup\"> Account</a>, oder\n      <a routerLink=\"/login\">logge dich ein</a>, damit du Ertseller dieser Karte\n      wirst und nur du diese bearbeiten kannst.\n    </span>\n    Pro-Tip: du kannst auch mathematische Symbole schreiben indem du Latex\n    Befehle verwendest und diese mit $ Zeichen umhüllst. Mehr zu den Latex\n    Befehlen findest du\n    <a href=\"https://en.wikibooks.org/wiki/LaTeX/Mathematics\">hier</a>.\n  </p>\n\n  <h4>Wie bearbeite ich eine Karte?</h4>\n  <p>\n    Wähle zuerst die Karteikarte aus die du bearbeiten möchtest. Drücke auf das\n    <i class=\"fas fa-pen\"></i> Symbol unter der Überschrift. Bearbeite deine\n    Karte im Formular und drücke auf \"Sichern\". Bitte beachte, dass du nur\n    öffentliche und deine eigenen Karten bearbeiten kannst. Karten, die von\n    anderen registrierten Nutzern erstellt worden sind kannst du leider nicht\n    bearbeit. In einer späteren Version wird es möglich sein für diese Karte\n    einen Verberungsvorschlag an den Ertseller der Karte zu senden.\n  </p>\n</div>\n<app-footer></app-footer>\n","import { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"app-account-page\",\r\n  templateUrl: \"./account-page.component.html\",\r\n  styleUrls: [\"./account-page.component.css\"],\r\n})\r\nexport class AccountPageComponent implements OnInit {\r\n  public page: string;\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.page = \"management\";\r\n  }\r\n\r\n  changePage(e: Event, s: string) {\r\n    e.preventDefault;\r\n    this.page = s;\r\n  }\r\n  setClass(s: string) {\r\n    if (this.page === s) {\r\n      return \"list-group-item list-group-item-action active\";\r\n    } else {\r\n      return \"list-group-item list-group-item-action\";\r\n    }\r\n  }\r\n}\r\n","<app-nav-bar></app-nav-bar>\r\n<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-4 col-xs-12\">\r\n      <div class=\"list-group\">\r\n        <button\r\n          [class]=\"setClass('overview')\"\r\n          (click)=\"changePage($event, 'overview')\"\r\n        >\r\n          Übersicht\r\n        </button>\r\n        <button\r\n          [class]=\"setClass('management')\"\r\n          (click)=\"changePage($event, 'management')\"\r\n        >\r\n          Profildaten ändern\r\n        </button>\r\n        <button\r\n          [class]=\"setClass('cards')\"\r\n          (click)=\"changePage($event, 'cards')\"\r\n        >\r\n          Karteikarten\r\n        </button>\r\n        <button\r\n          [class]=\"setClass('notifications')\"\r\n          (click)=\"changePage($event, 'notifications')\"\r\n        >\r\n          Benachrichtigungen<span\r\n            class=\"badge badge-danger badge-pill float-right\"\r\n            >3</span\r\n          >\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"col-md-8 col-xs-12\" [ngSwitch]=\"page\">\r\n      <app-overview *ngSwitchCase=\"'overview'\"></app-overview>\r\n      <app-change-profile *ngSwitchCase=\"'management'\"></app-change-profile>\r\n      <app-cards-overview *ngSwitchCase=\"'cards'\"></app-cards-overview>\r\n      <app-notifications *ngSwitchCase=\"'notifications'\"></app-notifications>\r\n    </div>\r\n  </div>\r\n</div>\r\n<app-footer></app-footer>\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  HostListener,\r\n  ViewChild,\r\n  ElementRef,\r\n} from \"@angular/core\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { HttpService } from \"../../services/http.service\";\r\nimport { StatesService } from \"../../services/states.service\";\r\nimport { Vorlesung } from \"src/app/models/Vorlesung\";\r\nimport { CardsService } from \"src/app/services/cards.service\";\r\nimport { Card } from \"../../models/Card\";\r\nimport { Title } from \"@angular/platform-browser\";\r\n@Component({\r\n  selector: \"app-cards-page\",\r\n  templateUrl: \"./cards-page.component.html\",\r\n  styleUrls: [\"./cards-page.component.css\"],\r\n})\r\nexport class CardsPageComponent implements OnInit {\r\n  public vlAbrv: string;\r\n  public lecture: Vorlesung;\r\n  public loading: boolean = true;\r\n  public formMode: string = \"none\";\r\n  public cards: Card[];\r\n\r\n  private inTypingField: boolean;\r\n  @ViewChild(\"alert\", { static: false }) alert: ElementRef;\r\n\r\n  @HostListener(\"click\", [\"$event.target\"])\r\n  onClick() {\r\n    this.stateServie.setHideSuggestions(true);\r\n  }\r\n  @HostListener(\"window:keyup\", [\"$event\"])\r\n  handleKeyDown(event: KeyboardEvent) {\r\n    if (!this.inTypingField) {\r\n      if (event.key == \"ArrowRight\") {\r\n        this.cardsService.goNext();\r\n      } else if (event.key == \"ArrowLeft\") {\r\n        this.cardsService.goPrev();\r\n      }\r\n    }\r\n  }\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private stateServie: StatesService,\r\n    private cardsService: CardsService,\r\n    private http: HttpService,\r\n    private title: Title\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.title.setTitle(\"Cards\");\r\n    this.vlAbrv = this.route.snapshot.paramMap.get(\"abrv\");\r\n    this.cardsService.getCards().subscribe((cards) => {\r\n      if (cards.length == 0) {\r\n        this.stateServie.setFormMode(\"add\");\r\n      }\r\n    });\r\n    this.stateServie.getTyping().subscribe((val) => (this.inTypingField = val));\r\n    this.stateServie\r\n      .getLoadingState()\r\n      .subscribe((value) => (this.loading = value));\r\n    this.stateServie.getFormMode().subscribe((mode) => (this.formMode = mode));\r\n  }\r\n\r\n  setLoading(loading: boolean): void {\r\n    this.loading = loading;\r\n    this.stateServie.setLoadingState(loading);\r\n  }\r\n}\r\n","<app-nav-bar></app-nav-bar>\r\n<br />\r\n<div class=\"container\">\r\n  <app-carousel></app-carousel>\r\n  <br />\r\n  <app-add-card-form *ngIf=\"formMode == 'add'\"></app-add-card-form>\r\n  <app-update-card-form *ngIf=\"formMode == 'edit'\"></app-update-card-form>\r\n</div>\r\n\r\n<app-footer></app-footer>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Vorlesung } from \"../../models/Vorlesung\";\r\nimport { StatesService } from \"../../services/states.service\";\r\n\r\n@Component({\r\n  selector: \"app-home-page\",\r\n  templateUrl: \"./home-page.component.html\",\r\n  styleUrls: [\"./home-page.component.css\"],\r\n})\r\nexport class HomePageComponent implements OnInit {\r\n  public loading: boolean = false;\r\n  public newVl: Vorlesung;\r\n  constructor(private statesService: StatesService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.statesService.getLoadingState().subscribe((val) => {\r\n      this.loading = val;\r\n    });\r\n  }\r\n\r\n  emitVl(lecture: Vorlesung) {\r\n    this.newVl = lecture;\r\n  }\r\n}\r\n","<app-nav-bar></app-nav-bar>\r\n\r\n<div class=\"container\">\r\n  <app-lectures [newVl]=\"newVl\"></app-lectures>\r\n  <br />\r\n  <app-add-lecture-form></app-add-lecture-form>\r\n</div>\r\n<app-footer></app-footer>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-login-page',\r\n  templateUrl: './login-page.component.html',\r\n  styleUrls: ['./login-page.component.css']\r\n})\r\nexport class LoginPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<app-nav-bar></app-nav-bar>\r\n<div>\r\n  <app-login-form></app-login-form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-signup-page',\r\n  templateUrl: './signup-page.component.html',\r\n  styleUrls: ['./signup-page.component.css']\r\n})\r\nexport class SignupPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<app-nav-bar></app-nav-bar>\r\n<div>\r\n  <app-signup-form></app-signup-form>\r\n</div>\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpService } from \"./http.service\";\r\nimport { Observable, BehaviorSubject } from \"rxjs\";\r\nimport { Card } from \"../models/Card\";\r\nimport { StatesService } from \"./states.service\";\r\nimport { tap, map } from \"rxjs/operators\";\r\nimport { Router } from \"@angular/router\";\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class CardsService {\r\n  //contains lecture abreviation of the current lecutre\r\n  private abrv: string;\r\n  //loads cards once from the server and whenever lecture changes\r\n  //and provides them as an Observable\r\n  private cards$: BehaviorSubject<Card[]> = new BehaviorSubject<Card[]>([]);\r\n  //provides a Subject to set a new index on which card the carousel should show\r\n  private newCardIndex$: BehaviorSubject<number> = new BehaviorSubject<number>(\r\n    0\r\n  );\r\n  //provides a Subject of the index of the card that is currently shown\r\n  //only the carousel shoul set nex values for this subject\r\n  private activeCardIndex$: BehaviorSubject<number> = new BehaviorSubject<\r\n    number\r\n  >(0);\r\n\r\n  constructor(\r\n    private httpService: HttpService, //to make calls to the server\r\n    private statesService: StatesService, //for setting the loading state\r\n    private router: Router //used to get the lecture abreviation from the route\r\n  ) {}\r\n\r\n  getCards(): Observable<Card[]> {\r\n    let abrv = this.router.url.split(/vorlesung\\//)[1]; //get the lecture abreviation from the route\r\n    if (this.abrv === abrv) {\r\n      //cards were already loaded for this lecture\r\n      return this.cards$.asObservable();\r\n    } else {\r\n      this.abrv = abrv;\r\n      //remove the old cards before fetching the new ones\r\n      this.cards$.next([]);\r\n      //make server request\r\n      this.httpService.getCardsFromLectureAbrv(abrv).subscribe((cards) => {\r\n        this.cards$.next(cards);\r\n      });\r\n      return this.cards$.asObservable();\r\n    }\r\n  }\r\n\r\n  updateCard(card: Card, index: number): Observable<any> {\r\n    this.statesService.setLoadingState(true);\r\n    //send update to server using http service\r\n    return this.httpService.updateCard(card).pipe(\r\n      tap((resp) => {\r\n        this.statesService.setLoadingState(false);\r\n        this.statesService.setFormMode(\"reset\"); //reset form to its previous state\r\n        //update subject\r\n        let cards = this.cards$.getValue();\r\n        cards[index] = card;\r\n        this.cards$.next(cards);\r\n      })\r\n    );\r\n  }\r\n\r\n  addCard(card: Card): Observable<any> {\r\n    this.statesService.setLoadingState(true);\r\n    //send new card to server using http service\r\n    return this.httpService.addCard(card).pipe(\r\n      tap((response) => {\r\n        this.statesService.setLoadingState(false);\r\n        card._id = response.body; //set id received from server response\r\n        //upate subject\r\n        let cards = this.cards$.getValue();\r\n        cards.push(card);\r\n        this.cards$.next(cards);\r\n\r\n        setTimeout(() => {\r\n          //show new card timeout needed because the carousel needs time to refresh\r\n          //its view\r\n          this.setNewCardIndex(cards.length - 1);\r\n        }, 100);\r\n      })\r\n    );\r\n  }\r\n  goNext() {\r\n    //show the next slide index\r\n    let index = this.newCardIndex$.getValue();\r\n    index++;\r\n    if (index >= this.cards$.getValue().length) {\r\n      index = 0;\r\n    }\r\n    this.newCardIndex$.next(index);\r\n  }\r\n  goPrev() {\r\n    //show the next slide index\r\n    let index = this.newCardIndex$.getValue();\r\n    index--;\r\n    if (index < 0) {\r\n      index = this.cards$.getValue().length - 1;\r\n    }\r\n    this.newCardIndex$.next(index);\r\n  }\r\n  //only the carousel should be subscribed to this\r\n  getNewCardIndex(): Observable<number> {\r\n    return this.newCardIndex$.asObservable();\r\n  }\r\n  //use this function to tell the carousel to go to a specific slide i\r\n  setNewCardIndex(i: number) {\r\n    this.newCardIndex$.next(i);\r\n  }\r\n  //only the carousel should call this method (on the sliding event)\r\n  setActiveCardIndex(i: number) {\r\n    this.activeCardIndex$.next(i);\r\n  }\r\n  //subsribe to this function to always get the index of the card that is currently shown\r\n  getActiveCardIndex(): Observable<number> {\r\n    return this.activeCardIndex$.asObservable();\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders, HttpResponse } from \"@angular/common/http\";\r\nimport { Observable, BehaviorSubject } from \"rxjs\";\r\nimport { tap, map } from \"rxjs/operators\";\r\nimport { StatesService } from \"./states.service\";\r\nimport { Router } from \"@angular/router\";\r\n//Models\r\nimport { User } from \"../models/User\";\r\nimport { Card } from \"../models/Card\";\r\nimport { Vorlesung } from \"../models/Vorlesung\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class HttpService {\r\n  private urlBase: string = \"api/\"; //url  base on which to adress the server with\r\n  private user$: BehaviorSubject<User> = new BehaviorSubject<User>(null); //stores the user\r\n  private lecture$: BehaviorSubject<Vorlesung> = new BehaviorSubject<Vorlesung>(\r\n    new Vorlesung(\"\", \"\")\r\n  ); //holds the current lecture\r\n  private lectures$: BehaviorSubject<Vorlesung[]>; //holds all lectures\r\n  private errors$: BehaviorSubject<string[]> = new BehaviorSubject<string[]>(\r\n    []\r\n  );\r\n  private profileInfo$: BehaviorSubject<any> = new BehaviorSubject<any>({\r\n    username: \"steve\",\r\n    email: \"bla@hotmail.com\",\r\n  });\r\n  private httpOptions = {\r\n    headers: new HttpHeaders({ \"Content-Type\": \"application/json\" }),\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient, //for sending http requests\r\n    private statesService: StatesService, //set the loading state\r\n    private router: Router //to get info in the current url\r\n  ) {}\r\n\r\n  //get Cards for a specific lecture from server\r\n  //This function shoul only be called by the cardsservice to initially load cards from server\r\n  getCardsFromLectureAbrv(abrv: string): Observable<Card[]> {\r\n    this.statesService.setLoadingState(true);\r\n    {\r\n      return this.http\r\n        .get<Card[]>(this.urlBase + \"cards/?abrv=\" + abrv, {\r\n          observe: \"response\",\r\n        })\r\n        .pipe(\r\n          tap(\r\n            (res) => {\r\n              this.statesService.setLoadingState(false);\r\n            },\r\n            (error) => {\r\n              this.addErrors(error);\r\n              this.statesService.setLoadingState(false);\r\n            }\r\n          ),\r\n          map((res) => res.body)\r\n        );\r\n    }\r\n  }\r\n\r\n  //add card to the database on server\r\n  addCard(card: Card): Observable<HttpResponse<any>> {\r\n    return this.http\r\n      .post<any>(\r\n        this.urlBase + \"cards/new\",\r\n        { card: card },\r\n        {\r\n          headers: this.httpOptions.headers,\r\n          observe: \"response\",\r\n        }\r\n      )\r\n      .pipe(\r\n        tap(\r\n          (res) => {\r\n            this.statesService.setLoadingState(false);\r\n          },\r\n          (error) => {\r\n            this.addErrors(error);\r\n            this.statesService.setLoadingState(false);\r\n          }\r\n        )\r\n      );\r\n  }\r\n\r\n  //update card on server\r\n  updateCard(card: Card): Observable<HttpResponse<any>> {\r\n    return this.http\r\n      .put<any>(\r\n        this.urlBase + \"cards/update\",\r\n        { card: card },\r\n        {\r\n          headers: this.httpOptions.headers,\r\n          observe: \"response\",\r\n        }\r\n      )\r\n      .pipe(\r\n        tap(\r\n          (res) => {\r\n            this.statesService.setLoadingState(false);\r\n          },\r\n          (error) => {\r\n            this.addErrors(error);\r\n            this.statesService.setLoadingState(false);\r\n          }\r\n        )\r\n      );\r\n  }\r\n\r\n  //get an array of all lectures\r\n  getAllLectures(): Observable<Vorlesung[]> {\r\n    this.statesService.setLoadingState(true);\r\n    if (this.lectures$) {\r\n      //lectures were already loaded once\r\n      this.statesService.setLoadingState(false);\r\n      return this.lectures$.asObservable();\r\n    } else {\r\n      //load lectures from the server\r\n      return this.http\r\n        .get<Vorlesung[]>(this.urlBase + \"lectures\", {\r\n          observe: \"response\",\r\n        })\r\n        .pipe(\r\n          tap(\r\n            (res) => {\r\n              this.statesService.setLoadingState(false);\r\n              this.lectures$ = new BehaviorSubject<Vorlesung[]>(res.body); //set the lectures subject\r\n            },\r\n            (error) => {\r\n              this.addErrors(error);\r\n              this.statesService.setLoadingState(false);\r\n            }\r\n          ),\r\n          map((res) => res.body)\r\n        );\r\n    }\r\n  }\r\n\r\n  //get the Current lecture\r\n  getCurrentLecture(): Observable<Vorlesung> {\r\n    let abrv = this.router.url.split(/vorlesung\\//)[1]; //get the abreviation of the lecture from the url\r\n    if (this.lecture$.getValue().abrv == abrv) {\r\n      //the lecture was already loaded\r\n      return this.lecture$.asObservable();\r\n    } else {\r\n      //fetch the lecture from the server\r\n      this.http\r\n        .get<Vorlesung>(this.urlBase + \"lectures/find?abrv=\" + abrv, {\r\n          observe: \"response\",\r\n        })\r\n        .subscribe(\r\n          (res) => {\r\n            this.lecture$.next(res.body);\r\n          },\r\n          (error) => {\r\n            this.addErrors(error);\r\n            this.statesService.setLoadingState(false);\r\n          }\r\n        );\r\n      return this.lecture$.asObservable();\r\n    }\r\n  }\r\n\r\n  //add a lecture to the database on the server\r\n  addLecture(lecture: Vorlesung): Observable<HttpResponse<any>> {\r\n    this.statesService.setLoadingState(true);\r\n    return this.http\r\n      .post<any>(\r\n        this.urlBase + \"lectures/new\",\r\n        { lecture: lecture },\r\n        {\r\n          headers: this.httpOptions.headers,\r\n          observe: \"response\",\r\n        }\r\n      )\r\n      .pipe(\r\n        tap(\r\n          (res) => {\r\n            //add the new lecture to the lectures subject\r\n            this.statesService.setLoadingState(false);\r\n            let lectures = this.lectures$.getValue();\r\n            lectures.push(lecture);\r\n            this.lectures$.next(lectures);\r\n          },\r\n          (error) => {\r\n            this.addErrors(error);\r\n            this.statesService.setLoadingState(false);\r\n          }\r\n        )\r\n      );\r\n  }\r\n\r\n  //login the user on the server\r\n  login(form): Observable<HttpResponse<User>> {\r\n    this.statesService.setLoadingState(true);\r\n    return this.http\r\n      .post<User>(this.urlBase + \"login\", form, {\r\n        headers: this.httpOptions.headers,\r\n        observe: \"response\",\r\n      })\r\n      .pipe(\r\n        tap(\r\n          (res) => {\r\n            this.statesService.setLoadingState(false);\r\n            this.user$.next(res.body); //set the user\r\n            if (form.remember) {\r\n              localStorage.setItem(\r\n                \"user\",\r\n                JSON.stringify(this.user$.getValue())\r\n              ); //store the user locally to keep the session\r\n            }\r\n          },\r\n          (error) => {\r\n            this.addErrors(error);\r\n            this.statesService.setLoadingState(false);\r\n          }\r\n        )\r\n      );\r\n  }\r\n\r\n  getUser(): Observable<User> {\r\n    if (this.user$.getValue() == null) {\r\n      let user = JSON.parse(localStorage.getItem(\"user\")); //load the user from the local storage\r\n      this.user$.next(user);\r\n    }\r\n    return this.user$.asObservable();\r\n  }\r\n  getUserInfo(): Observable<any> {\r\n    this.statesService.setLoadingState(true);\r\n    this.http\r\n      .get<any>(this.urlBase + \"user/info\", {\r\n        observe: \"response\",\r\n      })\r\n      .pipe(\r\n        tap(\r\n          (res) => {\r\n            this.statesService.setLoadingState(false);\r\n          },\r\n          (error) => {\r\n            this.addErrors(error);\r\n          }\r\n        ),\r\n        map((res) => res.body)\r\n      );\r\n    this.statesService.setLoadingState(false);\r\n    return this.profileInfo$.asObservable();\r\n  }\r\n\r\n  //logout the user in front- and backend\r\n  logout() {\r\n    this.statesService.setLoadingState(true);\r\n    this.http.get<any>(this.urlBase + \"user/logout\").subscribe((res) => {\r\n      this.statesService.setLoadingState(false);\r\n    });\r\n    localStorage.removeItem(\"user\"); //remove the user data from localstorage\r\n    this.user$.next(null);\r\n  }\r\n\r\n  //form = {username,email,password}\r\n  createAccount(form): Observable<HttpResponse<User>> {\r\n    this.statesService.setLoadingState(true);\r\n    return this.http\r\n      .post<User>(this.urlBase + \"user/new\", form, {\r\n        headers: this.httpOptions.headers,\r\n        observe: \"response\",\r\n      })\r\n      .pipe(\r\n        tap(\r\n          (res) => {\r\n            this.user$.next(res.body); //login the user (on success)\r\n            this.statesService.setLoadingState(false);\r\n          },\r\n          (error) => {\r\n            console.log(error.headers);\r\n            this.addErrors(error);\r\n            this.statesService.setLoadingState(false);\r\n          }\r\n        )\r\n      );\r\n  }\r\n  addErrors(error) {\r\n    let err = error.error;\r\n    let errors = this.errors$.getValue();\r\n    console.log(error.status);\r\n    if (error.status == 422) {\r\n      if (typeof err == \"string\") {\r\n        errors.push(err);\r\n      } else {\r\n        console.log(typeof err);\r\n        errors.push(...err);\r\n      }\r\n    } else if (error.status >= 500) {\r\n      errors.push(\r\n        \"Der Server scheint offline zu sein. Versuche es später erneut.\"\r\n      );\r\n    } else {\r\n      errors.push(\r\n        \"Ein unbekannter Fehler ist aufgetreten. Versuche es später erneut.\"\r\n      );\r\n      console.log(error);\r\n    }\r\n    this.errors$.next(errors);\r\n  }\r\n\r\n  //removes a specific error from the error array\r\n  removeError(index: number) {\r\n    let errors = this.errors$.getValue();\r\n    errors.splice(index, 1); //remove error at position index\r\n    this.errors$.next(errors);\r\n  }\r\n  clearErrors() {\r\n    this.errors$.next([]);\r\n  }\r\n\r\n  getErrors(): Observable<string[]> {\r\n    return this.errors$.asObservable();\r\n  }\r\n}\r\n","//This service is made to manage states across components\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class StatesService {\r\n  private formMode$: BehaviorSubject<string> = new BehaviorSubject(\"none\");\r\n  private lastFormMode: string;\r\n  private loading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n  private hideSgtn$: BehaviorSubject<boolean> = new BehaviorSubject(true);\r\n  private typing$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n  constructor() {}\r\n\r\n  getFormMode(): Observable<string> {\r\n    return this.formMode$.asObservable();\r\n  }\r\n  setFormMode(mode: string): void {\r\n    if (mode == \"reset\") {\r\n      if (!this.lastFormMode) {\r\n        //last form mode is undefined\r\n        this.lastFormMode = \"none\";\r\n      } // last Form mode defined\r\n      this.formMode$.next(this.lastFormMode);\r\n    } else {\r\n      this.formMode$.next(mode);\r\n      if (mode != \"edit\") this.lastFormMode = mode;\r\n    }\r\n  }\r\n  setTyping(val: boolean) {\r\n    this.typing$.next(val);\r\n  }\r\n  getTyping(): Observable<boolean> {\r\n    return this.typing$.asObservable();\r\n  }\r\n  getLoadingState(): BehaviorSubject<boolean> {\r\n    return this.loading$;\r\n  }\r\n  setLoadingState(value: boolean) {\r\n    this.loading$.next(value);\r\n  }\r\n  setHideSuggestions(value: boolean) {\r\n    this.hideSgtn$.next(value);\r\n  }\r\n  getHideSuggestions(): Observable<boolean> {\r\n    return this.hideSgtn$.asObservable();\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from \"@angular/core\";\r\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\r\nimport \"hammerjs\";\r\nimport { AppModule } from \"./app/app.module\";\r\nimport { environment } from \"./environments/environment\";\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic()\r\n  .bootstrapModule(AppModule)\r\n  .catch((err) => console.error(err));\r\n"]}